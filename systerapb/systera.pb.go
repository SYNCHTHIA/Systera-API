// Code generated by protoc-gen-go. DO NOT EDIT.
// source: systera.proto

/*
Package systerapb is a generated protocol buffer package.

It is generated from these files:
	systera.proto

It has these top-level messages:
	Empty
	PlayerData
	AnnounceRequest
	DispatchRequest
	SystemStream
	PlayerEntryStream
	PunishEntryStream
	ReportEntryStream
	PlayerEntry
	InitPlayerProfileRequest
	InitPlayerProfileResponse
	FetchPlayerProfileRequest
	FetchPlayerProfileByNameRequest
	FetchPlayerProfileResponse
	SetPlayerGroupsRequest
	SetPlayerServerRequest
	RemovePlayerServerRequest
	SetPlayerSettingsRequest
	PunishEntry
	GetPlayerPunishRequest
	GetPlayerPunishResponse
	SetPlayerPunishRequest
	SetPlayerPunishResponse
	ReportEntry
	ReportRequest
	ReportResponse
	GroupEntry
	FetchGroupsRequest
	FetchGroupsResponse
*/
package systerapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// PLAYER PUNISHMENTS
type PunishLevel int32

const (
	PunishLevel_WARN    PunishLevel = 0
	PunishLevel_KICK    PunishLevel = 1
	PunishLevel_TEMPBAN PunishLevel = 2
	PunishLevel_PERMBAN PunishLevel = 3
)

var PunishLevel_name = map[int32]string{
	0: "WARN",
	1: "KICK",
	2: "TEMPBAN",
	3: "PERMBAN",
}
var PunishLevel_value = map[string]int32{
	"WARN":    0,
	"KICK":    1,
	"TEMPBAN": 2,
	"PERMBAN": 3,
}

func (x PunishLevel) String() string {
	return proto.EnumName(PunishLevel_name, int32(x))
}
func (PunishLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SystemStream_Type int32

const (
	SystemStream_DISPATCH SystemStream_Type = 0
	SystemStream_ANNOUNCE SystemStream_Type = 1
)

var SystemStream_Type_name = map[int32]string{
	0: "DISPATCH",
	1: "ANNOUNCE",
}
var SystemStream_Type_value = map[string]int32{
	"DISPATCH": 0,
	"ANNOUNCE": 1,
}

func (x SystemStream_Type) String() string {
	return proto.EnumName(SystemStream_Type_name, int32(x))
}
func (SystemStream_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type PlayerEntryStream_Type int32

const (
	PlayerEntryStream_ALL      PlayerEntryStream_Type = 0
	PlayerEntryStream_GROUPS   PlayerEntryStream_Type = 1
	PlayerEntryStream_SETTINGS PlayerEntryStream_Type = 2
)

var PlayerEntryStream_Type_name = map[int32]string{
	0: "ALL",
	1: "GROUPS",
	2: "SETTINGS",
}
var PlayerEntryStream_Type_value = map[string]int32{
	"ALL":      0,
	"GROUPS":   1,
	"SETTINGS": 2,
}

func (x PlayerEntryStream_Type) String() string {
	return proto.EnumName(PlayerEntryStream_Type_name, int32(x))
}
func (PlayerEntryStream_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type PunishEntryStream_Type int32

const (
	PunishEntryStream_PUNISH PunishEntryStream_Type = 0
)

var PunishEntryStream_Type_name = map[int32]string{
	0: "PUNISH",
}
var PunishEntryStream_Type_value = map[string]int32{
	"PUNISH": 0,
}

func (x PunishEntryStream_Type) String() string {
	return proto.EnumName(PunishEntryStream_Type_name, int32(x))
}
func (PunishEntryStream_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type ReportEntryStream_Type int32

const (
	ReportEntryStream_REPORT ReportEntryStream_Type = 0
)

var ReportEntryStream_Type_name = map[int32]string{
	0: "REPORT",
}
var ReportEntryStream_Type_value = map[string]int32{
	"REPORT": 0,
}

func (x ReportEntryStream_Type) String() string {
	return proto.EnumName(ReportEntryStream_Type_name, int32(x))
}
func (ReportEntryStream_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PlayerData struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *PlayerData) Reset()                    { *m = PlayerData{} }
func (m *PlayerData) String() string            { return proto.CompactTextString(m) }
func (*PlayerData) ProtoMessage()               {}
func (*PlayerData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PlayerData) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PlayerData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

//
// Stream API
type AnnounceRequest struct {
	Target  string `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *AnnounceRequest) Reset()                    { *m = AnnounceRequest{} }
func (m *AnnounceRequest) String() string            { return proto.CompactTextString(m) }
func (*AnnounceRequest) ProtoMessage()               {}
func (*AnnounceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AnnounceRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *AnnounceRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DispatchRequest struct {
	Target string `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	Cmd    string `protobuf:"bytes,2,opt,name=cmd" json:"cmd,omitempty"`
}

func (m *DispatchRequest) Reset()                    { *m = DispatchRequest{} }
func (m *DispatchRequest) String() string            { return proto.CompactTextString(m) }
func (*DispatchRequest) ProtoMessage()               {}
func (*DispatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DispatchRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *DispatchRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

// System
type SystemStream struct {
	Type SystemStream_Type `protobuf:"varint,1,opt,name=type,enum=systerapb.SystemStream_Type" json:"type,omitempty"`
	Msg  string            `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *SystemStream) Reset()                    { *m = SystemStream{} }
func (m *SystemStream) String() string            { return proto.CompactTextString(m) }
func (*SystemStream) ProtoMessage()               {}
func (*SystemStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SystemStream) GetType() SystemStream_Type {
	if m != nil {
		return m.Type
	}
	return SystemStream_DISPATCH
}

func (m *SystemStream) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// Player
type PlayerEntryStream struct {
	Type  PlayerEntryStream_Type `protobuf:"varint,1,opt,name=type,enum=systerapb.PlayerEntryStream_Type" json:"type,omitempty"`
	Entry *PlayerEntry           `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
}

func (m *PlayerEntryStream) Reset()                    { *m = PlayerEntryStream{} }
func (m *PlayerEntryStream) String() string            { return proto.CompactTextString(m) }
func (*PlayerEntryStream) ProtoMessage()               {}
func (*PlayerEntryStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PlayerEntryStream) GetType() PlayerEntryStream_Type {
	if m != nil {
		return m.Type
	}
	return PlayerEntryStream_ALL
}

func (m *PlayerEntryStream) GetEntry() *PlayerEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

// Punishment
type PunishEntryStream struct {
	Type  PunishEntryStream_Type `protobuf:"varint,1,opt,name=type,enum=systerapb.PunishEntryStream_Type" json:"type,omitempty"`
	Entry *PunishEntry           `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
}

func (m *PunishEntryStream) Reset()                    { *m = PunishEntryStream{} }
func (m *PunishEntryStream) String() string            { return proto.CompactTextString(m) }
func (*PunishEntryStream) ProtoMessage()               {}
func (*PunishEntryStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PunishEntryStream) GetType() PunishEntryStream_Type {
	if m != nil {
		return m.Type
	}
	return PunishEntryStream_PUNISH
}

func (m *PunishEntryStream) GetEntry() *PunishEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

// Report
type ReportEntryStream struct {
	Type  ReportEntryStream_Type `protobuf:"varint,1,opt,name=type,enum=systerapb.ReportEntryStream_Type" json:"type,omitempty"`
	Entry *ReportEntry           `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
}

func (m *ReportEntryStream) Reset()                    { *m = ReportEntryStream{} }
func (m *ReportEntryStream) String() string            { return proto.CompactTextString(m) }
func (*ReportEntryStream) ProtoMessage()               {}
func (*ReportEntryStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReportEntryStream) GetType() ReportEntryStream_Type {
	if m != nil {
		return m.Type
	}
	return ReportEntryStream_REPORT
}

func (m *ReportEntryStream) GetEntry() *ReportEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

//
// PLAYER PROFILE
type PlayerEntry struct {
	PlayerUUID string          `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
	PlayerName string          `protobuf:"bytes,2,opt,name=playerName" json:"playerName,omitempty"`
	Groups     []string        `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	Settings   map[string]bool `protobuf:"bytes,4,rep,name=settings" json:"settings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *PlayerEntry) Reset()                    { *m = PlayerEntry{} }
func (m *PlayerEntry) String() string            { return proto.CompactTextString(m) }
func (*PlayerEntry) ProtoMessage()               {}
func (*PlayerEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PlayerEntry) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

func (m *PlayerEntry) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *PlayerEntry) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *PlayerEntry) GetSettings() map[string]bool {
	if m != nil {
		return m.Settings
	}
	return nil
}

type InitPlayerProfileRequest struct {
	PlayerUUID      string `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
	PlayerName      string `protobuf:"bytes,2,opt,name=playerName" json:"playerName,omitempty"`
	PlayerIPAddress string `protobuf:"bytes,3,opt,name=playerIPAddress" json:"playerIPAddress,omitempty"`
	PlayerHostname  string `protobuf:"bytes,4,opt,name=playerHostname" json:"playerHostname,omitempty"`
}

func (m *InitPlayerProfileRequest) Reset()                    { *m = InitPlayerProfileRequest{} }
func (m *InitPlayerProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*InitPlayerProfileRequest) ProtoMessage()               {}
func (*InitPlayerProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *InitPlayerProfileRequest) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

func (m *InitPlayerProfileRequest) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *InitPlayerProfileRequest) GetPlayerIPAddress() string {
	if m != nil {
		return m.PlayerIPAddress
	}
	return ""
}

func (m *InitPlayerProfileRequest) GetPlayerHostname() string {
	if m != nil {
		return m.PlayerHostname
	}
	return ""
}

type InitPlayerProfileResponse struct {
	HasProfile bool `protobuf:"varint,1,opt,name=hasProfile" json:"hasProfile,omitempty"`
}

func (m *InitPlayerProfileResponse) Reset()                    { *m = InitPlayerProfileResponse{} }
func (m *InitPlayerProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*InitPlayerProfileResponse) ProtoMessage()               {}
func (*InitPlayerProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *InitPlayerProfileResponse) GetHasProfile() bool {
	if m != nil {
		return m.HasProfile
	}
	return false
}

type FetchPlayerProfileRequest struct {
	PlayerUUID string `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
}

func (m *FetchPlayerProfileRequest) Reset()                    { *m = FetchPlayerProfileRequest{} }
func (m *FetchPlayerProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchPlayerProfileRequest) ProtoMessage()               {}
func (*FetchPlayerProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FetchPlayerProfileRequest) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

type FetchPlayerProfileByNameRequest struct {
	PlayerName string `protobuf:"bytes,1,opt,name=playerName" json:"playerName,omitempty"`
}

func (m *FetchPlayerProfileByNameRequest) Reset()         { *m = FetchPlayerProfileByNameRequest{} }
func (m *FetchPlayerProfileByNameRequest) String() string { return proto.CompactTextString(m) }
func (*FetchPlayerProfileByNameRequest) ProtoMessage()    {}
func (*FetchPlayerProfileByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12}
}

func (m *FetchPlayerProfileByNameRequest) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

type FetchPlayerProfileResponse struct {
	Entry *PlayerEntry `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
}

func (m *FetchPlayerProfileResponse) Reset()                    { *m = FetchPlayerProfileResponse{} }
func (m *FetchPlayerProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchPlayerProfileResponse) ProtoMessage()               {}
func (*FetchPlayerProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FetchPlayerProfileResponse) GetEntry() *PlayerEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type SetPlayerGroupsRequest struct {
	PlayerUUID string   `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
	Groups     []string `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
}

func (m *SetPlayerGroupsRequest) Reset()                    { *m = SetPlayerGroupsRequest{} }
func (m *SetPlayerGroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPlayerGroupsRequest) ProtoMessage()               {}
func (*SetPlayerGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SetPlayerGroupsRequest) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

func (m *SetPlayerGroupsRequest) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

type SetPlayerServerRequest struct {
	PlayerUUID string `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
	ServerName string `protobuf:"bytes,2,opt,name=serverName" json:"serverName,omitempty"`
}

func (m *SetPlayerServerRequest) Reset()                    { *m = SetPlayerServerRequest{} }
func (m *SetPlayerServerRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPlayerServerRequest) ProtoMessage()               {}
func (*SetPlayerServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SetPlayerServerRequest) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

func (m *SetPlayerServerRequest) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

type RemovePlayerServerRequest struct {
	PlayerUUID string `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
	ServerName string `protobuf:"bytes,2,opt,name=serverName" json:"serverName,omitempty"`
}

func (m *RemovePlayerServerRequest) Reset()                    { *m = RemovePlayerServerRequest{} }
func (m *RemovePlayerServerRequest) String() string            { return proto.CompactTextString(m) }
func (*RemovePlayerServerRequest) ProtoMessage()               {}
func (*RemovePlayerServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RemovePlayerServerRequest) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

func (m *RemovePlayerServerRequest) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

type SetPlayerSettingsRequest struct {
	PlayerUUID string `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
	Key        string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value      bool   `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (m *SetPlayerSettingsRequest) Reset()                    { *m = SetPlayerSettingsRequest{} }
func (m *SetPlayerSettingsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPlayerSettingsRequest) ProtoMessage()               {}
func (*SetPlayerSettingsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SetPlayerSettingsRequest) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

func (m *SetPlayerSettingsRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetPlayerSettingsRequest) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type PunishEntry struct {
	Available    bool        `protobuf:"varint,1,opt,name=available" json:"available,omitempty"`
	Level        PunishLevel `protobuf:"varint,2,opt,name=level,enum=systerapb.PunishLevel" json:"level,omitempty"`
	Reason       string      `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	Date         int64       `protobuf:"varint,4,opt,name=date" json:"date,omitempty"`
	Expire       int64       `protobuf:"varint,5,opt,name=expire" json:"expire,omitempty"`
	PunishedFrom *PlayerData `protobuf:"bytes,6,opt,name=punishedFrom" json:"punishedFrom,omitempty"`
	PunishedTo   *PlayerData `protobuf:"bytes,7,opt,name=punishedTo" json:"punishedTo,omitempty"`
}

func (m *PunishEntry) Reset()                    { *m = PunishEntry{} }
func (m *PunishEntry) String() string            { return proto.CompactTextString(m) }
func (*PunishEntry) ProtoMessage()               {}
func (*PunishEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *PunishEntry) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *PunishEntry) GetLevel() PunishLevel {
	if m != nil {
		return m.Level
	}
	return PunishLevel_WARN
}

func (m *PunishEntry) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PunishEntry) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *PunishEntry) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *PunishEntry) GetPunishedFrom() *PlayerData {
	if m != nil {
		return m.PunishedFrom
	}
	return nil
}

func (m *PunishEntry) GetPunishedTo() *PlayerData {
	if m != nil {
		return m.PunishedTo
	}
	return nil
}

type GetPlayerPunishRequest struct {
	PlayerUUID     string      `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
	FilterLevel    PunishLevel `protobuf:"varint,2,opt,name=filterLevel,enum=systerapb.PunishLevel" json:"filterLevel,omitempty"`
	IncludeExpired bool        `protobuf:"varint,3,opt,name=includeExpired" json:"includeExpired,omitempty"`
}

func (m *GetPlayerPunishRequest) Reset()                    { *m = GetPlayerPunishRequest{} }
func (m *GetPlayerPunishRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerPunishRequest) ProtoMessage()               {}
func (*GetPlayerPunishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetPlayerPunishRequest) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

func (m *GetPlayerPunishRequest) GetFilterLevel() PunishLevel {
	if m != nil {
		return m.FilterLevel
	}
	return PunishLevel_WARN
}

func (m *GetPlayerPunishRequest) GetIncludeExpired() bool {
	if m != nil {
		return m.IncludeExpired
	}
	return false
}

type GetPlayerPunishResponse struct {
	Entry []*PunishEntry `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
}

func (m *GetPlayerPunishResponse) Reset()                    { *m = GetPlayerPunishResponse{} }
func (m *GetPlayerPunishResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerPunishResponse) ProtoMessage()               {}
func (*GetPlayerPunishResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetPlayerPunishResponse) GetEntry() []*PunishEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type SetPlayerPunishRequest struct {
	Force bool         `protobuf:"varint,1,opt,name=force" json:"force,omitempty"`
	Entry *PunishEntry `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
}

func (m *SetPlayerPunishRequest) Reset()                    { *m = SetPlayerPunishRequest{} }
func (m *SetPlayerPunishRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPlayerPunishRequest) ProtoMessage()               {}
func (*SetPlayerPunishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SetPlayerPunishRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *SetPlayerPunishRequest) GetEntry() *PunishEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type SetPlayerPunishResponse struct {
	Noprofile bool `protobuf:"varint,1,opt,name=noprofile" json:"noprofile,omitempty"`
	Offline   bool `protobuf:"varint,2,opt,name=offline" json:"offline,omitempty"`
	Duplicate bool `protobuf:"varint,3,opt,name=duplicate" json:"duplicate,omitempty"`
	Cooldown  bool `protobuf:"varint,4,opt,name=cooldown" json:"cooldown,omitempty"`
}

func (m *SetPlayerPunishResponse) Reset()                    { *m = SetPlayerPunishResponse{} }
func (m *SetPlayerPunishResponse) String() string            { return proto.CompactTextString(m) }
func (*SetPlayerPunishResponse) ProtoMessage()               {}
func (*SetPlayerPunishResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SetPlayerPunishResponse) GetNoprofile() bool {
	if m != nil {
		return m.Noprofile
	}
	return false
}

func (m *SetPlayerPunishResponse) GetOffline() bool {
	if m != nil {
		return m.Offline
	}
	return false
}

func (m *SetPlayerPunishResponse) GetDuplicate() bool {
	if m != nil {
		return m.Duplicate
	}
	return false
}

func (m *SetPlayerPunishResponse) GetCooldown() bool {
	if m != nil {
		return m.Cooldown
	}
	return false
}

type ReportEntry struct {
	From    *PlayerData `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To      *PlayerData `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Message string      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Date    int64       `protobuf:"varint,4,opt,name=date" json:"date,omitempty"`
	Server  string      `protobuf:"bytes,5,opt,name=server" json:"server,omitempty"`
}

func (m *ReportEntry) Reset()                    { *m = ReportEntry{} }
func (m *ReportEntry) String() string            { return proto.CompactTextString(m) }
func (*ReportEntry) ProtoMessage()               {}
func (*ReportEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ReportEntry) GetFrom() *PlayerData {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ReportEntry) GetTo() *PlayerData {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ReportEntry) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReportEntry) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ReportEntry) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

type ReportRequest struct {
	From    *PlayerData `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To      *PlayerData `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Message string      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReportRequest) Reset()                    { *m = ReportRequest{} }
func (m *ReportRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportRequest) ProtoMessage()               {}
func (*ReportRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ReportRequest) GetFrom() *PlayerData {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ReportRequest) GetTo() *PlayerData {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ReportRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReportResponse struct {
}

func (m *ReportResponse) Reset()                    { *m = ReportResponse{} }
func (m *ReportResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportResponse) ProtoMessage()               {}
func (*ReportResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

//
// GROUP PERMISISONS
type GroupEntry struct {
	GroupName   string   `protobuf:"bytes,1,opt,name=groupName" json:"groupName,omitempty"`
	GroupPrefix string   `protobuf:"bytes,2,opt,name=groupPrefix" json:"groupPrefix,omitempty"`
	GlobalPerms []string `protobuf:"bytes,3,rep,name=globalPerms" json:"globalPerms,omitempty"`
	ServerPerms []string `protobuf:"bytes,4,rep,name=serverPerms" json:"serverPerms,omitempty"`
}

func (m *GroupEntry) Reset()                    { *m = GroupEntry{} }
func (m *GroupEntry) String() string            { return proto.CompactTextString(m) }
func (*GroupEntry) ProtoMessage()               {}
func (*GroupEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GroupEntry) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *GroupEntry) GetGroupPrefix() string {
	if m != nil {
		return m.GroupPrefix
	}
	return ""
}

func (m *GroupEntry) GetGlobalPerms() []string {
	if m != nil {
		return m.GlobalPerms
	}
	return nil
}

func (m *GroupEntry) GetServerPerms() []string {
	if m != nil {
		return m.ServerPerms
	}
	return nil
}

type FetchGroupsRequest struct {
	ServerName string `protobuf:"bytes,1,opt,name=serverName" json:"serverName,omitempty"`
}

func (m *FetchGroupsRequest) Reset()                    { *m = FetchGroupsRequest{} }
func (m *FetchGroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchGroupsRequest) ProtoMessage()               {}
func (*FetchGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *FetchGroupsRequest) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

type FetchGroupsResponse struct {
	Groups []*GroupEntry `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *FetchGroupsResponse) Reset()                    { *m = FetchGroupsResponse{} }
func (m *FetchGroupsResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchGroupsResponse) ProtoMessage()               {}
func (*FetchGroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *FetchGroupsResponse) GetGroups() []*GroupEntry {
	if m != nil {
		return m.Groups
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "systerapb.Empty")
	proto.RegisterType((*PlayerData)(nil), "systerapb.PlayerData")
	proto.RegisterType((*AnnounceRequest)(nil), "systerapb.AnnounceRequest")
	proto.RegisterType((*DispatchRequest)(nil), "systerapb.DispatchRequest")
	proto.RegisterType((*SystemStream)(nil), "systerapb.SystemStream")
	proto.RegisterType((*PlayerEntryStream)(nil), "systerapb.PlayerEntryStream")
	proto.RegisterType((*PunishEntryStream)(nil), "systerapb.PunishEntryStream")
	proto.RegisterType((*ReportEntryStream)(nil), "systerapb.ReportEntryStream")
	proto.RegisterType((*PlayerEntry)(nil), "systerapb.PlayerEntry")
	proto.RegisterType((*InitPlayerProfileRequest)(nil), "systerapb.InitPlayerProfileRequest")
	proto.RegisterType((*InitPlayerProfileResponse)(nil), "systerapb.InitPlayerProfileResponse")
	proto.RegisterType((*FetchPlayerProfileRequest)(nil), "systerapb.FetchPlayerProfileRequest")
	proto.RegisterType((*FetchPlayerProfileByNameRequest)(nil), "systerapb.FetchPlayerProfileByNameRequest")
	proto.RegisterType((*FetchPlayerProfileResponse)(nil), "systerapb.FetchPlayerProfileResponse")
	proto.RegisterType((*SetPlayerGroupsRequest)(nil), "systerapb.SetPlayerGroupsRequest")
	proto.RegisterType((*SetPlayerServerRequest)(nil), "systerapb.SetPlayerServerRequest")
	proto.RegisterType((*RemovePlayerServerRequest)(nil), "systerapb.RemovePlayerServerRequest")
	proto.RegisterType((*SetPlayerSettingsRequest)(nil), "systerapb.SetPlayerSettingsRequest")
	proto.RegisterType((*PunishEntry)(nil), "systerapb.PunishEntry")
	proto.RegisterType((*GetPlayerPunishRequest)(nil), "systerapb.GetPlayerPunishRequest")
	proto.RegisterType((*GetPlayerPunishResponse)(nil), "systerapb.GetPlayerPunishResponse")
	proto.RegisterType((*SetPlayerPunishRequest)(nil), "systerapb.SetPlayerPunishRequest")
	proto.RegisterType((*SetPlayerPunishResponse)(nil), "systerapb.SetPlayerPunishResponse")
	proto.RegisterType((*ReportEntry)(nil), "systerapb.ReportEntry")
	proto.RegisterType((*ReportRequest)(nil), "systerapb.ReportRequest")
	proto.RegisterType((*ReportResponse)(nil), "systerapb.ReportResponse")
	proto.RegisterType((*GroupEntry)(nil), "systerapb.GroupEntry")
	proto.RegisterType((*FetchGroupsRequest)(nil), "systerapb.FetchGroupsRequest")
	proto.RegisterType((*FetchGroupsResponse)(nil), "systerapb.FetchGroupsResponse")
	proto.RegisterEnum("systerapb.PunishLevel", PunishLevel_name, PunishLevel_value)
	proto.RegisterEnum("systerapb.SystemStream_Type", SystemStream_Type_name, SystemStream_Type_value)
	proto.RegisterEnum("systerapb.PlayerEntryStream_Type", PlayerEntryStream_Type_name, PlayerEntryStream_Type_value)
	proto.RegisterEnum("systerapb.PunishEntryStream_Type", PunishEntryStream_Type_name, PunishEntryStream_Type_value)
	proto.RegisterEnum("systerapb.ReportEntryStream_Type", ReportEntryStream_Type_name, ReportEntryStream_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Systera service

type SysteraClient interface {
	Announce(ctx context.Context, in *AnnounceRequest, opts ...grpc.CallOption) (*Empty, error)
	Dispatch(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*Empty, error)
	InitPlayerProfile(ctx context.Context, in *InitPlayerProfileRequest, opts ...grpc.CallOption) (*InitPlayerProfileResponse, error)
	FetchPlayerProfile(ctx context.Context, in *FetchPlayerProfileRequest, opts ...grpc.CallOption) (*FetchPlayerProfileResponse, error)
	FetchPlayerProfileByName(ctx context.Context, in *FetchPlayerProfileByNameRequest, opts ...grpc.CallOption) (*FetchPlayerProfileResponse, error)
	SetPlayerGroups(ctx context.Context, in *SetPlayerGroupsRequest, opts ...grpc.CallOption) (*Empty, error)
	SetPlayerServer(ctx context.Context, in *SetPlayerServerRequest, opts ...grpc.CallOption) (*Empty, error)
	RemovePlayerServer(ctx context.Context, in *RemovePlayerServerRequest, opts ...grpc.CallOption) (*Empty, error)
	SetPlayerSettings(ctx context.Context, in *SetPlayerSettingsRequest, opts ...grpc.CallOption) (*Empty, error)
	GetPlayerPunish(ctx context.Context, in *GetPlayerPunishRequest, opts ...grpc.CallOption) (*GetPlayerPunishResponse, error)
	SetPlayerPunish(ctx context.Context, in *SetPlayerPunishRequest, opts ...grpc.CallOption) (*SetPlayerPunishResponse, error)
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
	FetchGroups(ctx context.Context, in *FetchGroupsRequest, opts ...grpc.CallOption) (*FetchGroupsResponse, error)
}

type systeraClient struct {
	cc *grpc.ClientConn
}

func NewSysteraClient(cc *grpc.ClientConn) SysteraClient {
	return &systeraClient{cc}
}

func (c *systeraClient) Announce(ctx context.Context, in *AnnounceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/systerapb.Systera/Announce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) Dispatch(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/systerapb.Systera/Dispatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) InitPlayerProfile(ctx context.Context, in *InitPlayerProfileRequest, opts ...grpc.CallOption) (*InitPlayerProfileResponse, error) {
	out := new(InitPlayerProfileResponse)
	err := grpc.Invoke(ctx, "/systerapb.Systera/InitPlayerProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) FetchPlayerProfile(ctx context.Context, in *FetchPlayerProfileRequest, opts ...grpc.CallOption) (*FetchPlayerProfileResponse, error) {
	out := new(FetchPlayerProfileResponse)
	err := grpc.Invoke(ctx, "/systerapb.Systera/FetchPlayerProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) FetchPlayerProfileByName(ctx context.Context, in *FetchPlayerProfileByNameRequest, opts ...grpc.CallOption) (*FetchPlayerProfileResponse, error) {
	out := new(FetchPlayerProfileResponse)
	err := grpc.Invoke(ctx, "/systerapb.Systera/FetchPlayerProfileByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) SetPlayerGroups(ctx context.Context, in *SetPlayerGroupsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/systerapb.Systera/SetPlayerGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) SetPlayerServer(ctx context.Context, in *SetPlayerServerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/systerapb.Systera/SetPlayerServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) RemovePlayerServer(ctx context.Context, in *RemovePlayerServerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/systerapb.Systera/RemovePlayerServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) SetPlayerSettings(ctx context.Context, in *SetPlayerSettingsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/systerapb.Systera/SetPlayerSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) GetPlayerPunish(ctx context.Context, in *GetPlayerPunishRequest, opts ...grpc.CallOption) (*GetPlayerPunishResponse, error) {
	out := new(GetPlayerPunishResponse)
	err := grpc.Invoke(ctx, "/systerapb.Systera/GetPlayerPunish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) SetPlayerPunish(ctx context.Context, in *SetPlayerPunishRequest, opts ...grpc.CallOption) (*SetPlayerPunishResponse, error) {
	out := new(SetPlayerPunishResponse)
	err := grpc.Invoke(ctx, "/systerapb.Systera/SetPlayerPunish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := grpc.Invoke(ctx, "/systerapb.Systera/Report", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) FetchGroups(ctx context.Context, in *FetchGroupsRequest, opts ...grpc.CallOption) (*FetchGroupsResponse, error) {
	out := new(FetchGroupsResponse)
	err := grpc.Invoke(ctx, "/systerapb.Systera/FetchGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Systera service

type SysteraServer interface {
	Announce(context.Context, *AnnounceRequest) (*Empty, error)
	Dispatch(context.Context, *DispatchRequest) (*Empty, error)
	InitPlayerProfile(context.Context, *InitPlayerProfileRequest) (*InitPlayerProfileResponse, error)
	FetchPlayerProfile(context.Context, *FetchPlayerProfileRequest) (*FetchPlayerProfileResponse, error)
	FetchPlayerProfileByName(context.Context, *FetchPlayerProfileByNameRequest) (*FetchPlayerProfileResponse, error)
	SetPlayerGroups(context.Context, *SetPlayerGroupsRequest) (*Empty, error)
	SetPlayerServer(context.Context, *SetPlayerServerRequest) (*Empty, error)
	RemovePlayerServer(context.Context, *RemovePlayerServerRequest) (*Empty, error)
	SetPlayerSettings(context.Context, *SetPlayerSettingsRequest) (*Empty, error)
	GetPlayerPunish(context.Context, *GetPlayerPunishRequest) (*GetPlayerPunishResponse, error)
	SetPlayerPunish(context.Context, *SetPlayerPunishRequest) (*SetPlayerPunishResponse, error)
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
	FetchGroups(context.Context, *FetchGroupsRequest) (*FetchGroupsResponse, error)
}

func RegisterSysteraServer(s *grpc.Server, srv SysteraServer) {
	s.RegisterService(&_Systera_serviceDesc, srv)
}

func _Systera_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnounceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).Announce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systerapb.Systera/Announce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).Announce(ctx, req.(*AnnounceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systerapb.Systera/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).Dispatch(ctx, req.(*DispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_InitPlayerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitPlayerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).InitPlayerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systerapb.Systera/InitPlayerProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).InitPlayerProfile(ctx, req.(*InitPlayerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_FetchPlayerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPlayerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).FetchPlayerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systerapb.Systera/FetchPlayerProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).FetchPlayerProfile(ctx, req.(*FetchPlayerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_FetchPlayerProfileByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPlayerProfileByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).FetchPlayerProfileByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systerapb.Systera/FetchPlayerProfileByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).FetchPlayerProfileByName(ctx, req.(*FetchPlayerProfileByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_SetPlayerGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).SetPlayerGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systerapb.Systera/SetPlayerGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).SetPlayerGroups(ctx, req.(*SetPlayerGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_SetPlayerServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).SetPlayerServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systerapb.Systera/SetPlayerServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).SetPlayerServer(ctx, req.(*SetPlayerServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_RemovePlayerServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlayerServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).RemovePlayerServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systerapb.Systera/RemovePlayerServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).RemovePlayerServer(ctx, req.(*RemovePlayerServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_SetPlayerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).SetPlayerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systerapb.Systera/SetPlayerSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).SetPlayerSettings(ctx, req.(*SetPlayerSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_GetPlayerPunish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerPunishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).GetPlayerPunish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systerapb.Systera/GetPlayerPunish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).GetPlayerPunish(ctx, req.(*GetPlayerPunishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_SetPlayerPunish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerPunishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).SetPlayerPunish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systerapb.Systera/SetPlayerPunish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).SetPlayerPunish(ctx, req.(*SetPlayerPunishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systerapb.Systera/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_FetchGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).FetchGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systerapb.Systera/FetchGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).FetchGroups(ctx, req.(*FetchGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Systera_serviceDesc = grpc.ServiceDesc{
	ServiceName: "systerapb.Systera",
	HandlerType: (*SysteraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Announce",
			Handler:    _Systera_Announce_Handler,
		},
		{
			MethodName: "Dispatch",
			Handler:    _Systera_Dispatch_Handler,
		},
		{
			MethodName: "InitPlayerProfile",
			Handler:    _Systera_InitPlayerProfile_Handler,
		},
		{
			MethodName: "FetchPlayerProfile",
			Handler:    _Systera_FetchPlayerProfile_Handler,
		},
		{
			MethodName: "FetchPlayerProfileByName",
			Handler:    _Systera_FetchPlayerProfileByName_Handler,
		},
		{
			MethodName: "SetPlayerGroups",
			Handler:    _Systera_SetPlayerGroups_Handler,
		},
		{
			MethodName: "SetPlayerServer",
			Handler:    _Systera_SetPlayerServer_Handler,
		},
		{
			MethodName: "RemovePlayerServer",
			Handler:    _Systera_RemovePlayerServer_Handler,
		},
		{
			MethodName: "SetPlayerSettings",
			Handler:    _Systera_SetPlayerSettings_Handler,
		},
		{
			MethodName: "GetPlayerPunish",
			Handler:    _Systera_GetPlayerPunish_Handler,
		},
		{
			MethodName: "SetPlayerPunish",
			Handler:    _Systera_SetPlayerPunish_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Systera_Report_Handler,
		},
		{
			MethodName: "FetchGroups",
			Handler:    _Systera_FetchGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "systera.proto",
}

func init() { proto.RegisterFile("systera.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5f, 0x73, 0xdb, 0x44,
	0x10, 0xb7, 0x6c, 0x27, 0x71, 0xd6, 0x4d, 0xa2, 0x1e, 0x25, 0x75, 0x3c, 0xa5, 0x84, 0xa3, 0x65,
	0xda, 0x0e, 0x78, 0x98, 0xd0, 0xce, 0x94, 0xe6, 0x01, 0x9c, 0xc4, 0x4d, 0xdd, 0xa6, 0x8e, 0x46,
	0x72, 0x06, 0xa6, 0xf0, 0x80, 0x62, 0x9f, 0x13, 0x0d, 0xb2, 0x4e, 0x48, 0xe7, 0x50, 0x0f, 0x1f,
	0x01, 0x66, 0xe0, 0x99, 0x57, 0x86, 0xb7, 0x7e, 0x2c, 0x3e, 0x08, 0x73, 0x7f, 0x64, 0x9f, 0x2c,
	0x39, 0x71, 0x61, 0xe0, 0x4d, 0xbb, 0xb7, 0xbb, 0xf7, 0xbb, 0xbd, 0xfd, 0x77, 0x82, 0xb5, 0x78,
	0x1c, 0x33, 0x12, 0xb9, 0x8d, 0x30, 0xa2, 0x8c, 0xa2, 0x55, 0x45, 0x86, 0xa7, 0x78, 0x05, 0x96,
	0x5a, 0xc3, 0x90, 0x8d, 0xf1, 0x43, 0x00, 0xcb, 0x77, 0xc7, 0x24, 0x3a, 0x70, 0x99, 0x8b, 0x10,
	0x94, 0x4f, 0x4e, 0xda, 0x07, 0x35, 0x63, 0xdb, 0xb8, 0xb7, 0x6a, 0x8b, 0x6f, 0xce, 0x0b, 0xdc,
	0x21, 0xa9, 0x15, 0x25, 0x8f, 0x7f, 0xe3, 0x7d, 0xd8, 0x68, 0x06, 0x01, 0x1d, 0x05, 0x3d, 0x62,
	0x93, 0x1f, 0x46, 0x24, 0x66, 0x68, 0x13, 0x96, 0x99, 0x1b, 0x9d, 0x11, 0xa6, 0x94, 0x15, 0x85,
	0x6a, 0xb0, 0x32, 0x24, 0x71, 0xec, 0x9e, 0x25, 0x16, 0x12, 0x12, 0xef, 0xc2, 0xc6, 0x81, 0x17,
	0x87, 0x2e, 0xeb, 0x9d, 0x5f, 0x65, 0xc4, 0x84, 0x52, 0x6f, 0xd8, 0x57, 0x06, 0xf8, 0x27, 0xbe,
	0x80, 0x6b, 0x0e, 0x3f, 0xcd, 0xd0, 0x61, 0x11, 0x71, 0x87, 0xe8, 0x53, 0x28, 0xb3, 0x71, 0x48,
	0x84, 0xde, 0xfa, 0xce, 0xad, 0xc6, 0xe4, 0xa8, 0x0d, 0x5d, 0xac, 0xd1, 0x1d, 0x87, 0xc4, 0x16,
	0x92, 0xdc, 0xe6, 0x30, 0x3e, 0x4b, 0x6c, 0x0e, 0xe3, 0x33, 0x8c, 0xa1, 0xcc, 0xd7, 0xd1, 0x35,
	0xa8, 0x1c, 0xb4, 0x1d, 0xab, 0xd9, 0xdd, 0x7f, 0x66, 0x16, 0x38, 0xd5, 0xec, 0x74, 0x8e, 0x4f,
	0x3a, 0xfb, 0x2d, 0xd3, 0xc0, 0x7f, 0x18, 0x70, 0x5d, 0x3a, 0xac, 0x15, 0xb0, 0x68, 0xac, 0x76,
	0x7f, 0x94, 0xda, 0xfd, 0x03, 0x6d, 0xf7, 0x8c, 0xac, 0x0e, 0xe1, 0x63, 0x58, 0x22, 0x7c, 0x45,
	0x80, 0xa8, 0xee, 0x6c, 0xe6, 0xeb, 0xd9, 0x52, 0x08, 0xdf, 0x57, 0xf0, 0x56, 0xa0, 0xd4, 0x3c,
	0x3a, 0x32, 0x0b, 0x08, 0x60, 0xf9, 0xd0, 0x3e, 0x3e, 0xb1, 0x1c, 0xd3, 0xe0, 0x28, 0x9d, 0x56,
	0xb7, 0xdb, 0xee, 0x1c, 0x3a, 0x66, 0x11, 0xff, 0xc2, 0x51, 0x8e, 0x02, 0x2f, 0x3e, 0x5f, 0x10,
	0xe5, 0xac, 0xec, 0xa2, 0x28, 0xa7, 0x7a, 0x09, 0x4a, 0xa4, 0x50, 0x02, 0x2c, 0x5b, 0x27, 0x9d,
	0xb6, 0xf3, 0xcc, 0x2c, 0x08, 0x38, 0x36, 0x09, 0x69, 0xc4, 0x16, 0x83, 0x93, 0x91, 0x5d, 0x10,
	0x8e, 0xa6, 0x97, 0x03, 0xc7, 0x6e, 0x59, 0xc7, 0x76, 0xd7, 0x2c, 0xe0, 0xbf, 0x0c, 0xa8, 0x6a,
	0xfe, 0x45, 0xb7, 0x01, 0x42, 0x41, 0x6a, 0xb1, 0xaf, 0x71, 0xa6, 0xeb, 0x9d, 0x69, 0x1e, 0x68,
	0x1c, 0x1e, 0xb5, 0x67, 0x11, 0x1d, 0x85, 0x71, 0xad, 0xb4, 0x5d, 0xe2, 0x51, 0x2b, 0x29, 0xf4,
	0x25, 0x54, 0x62, 0xc2, 0x98, 0x17, 0x9c, 0xc5, 0xb5, 0xf2, 0x76, 0xe9, 0x5e, 0x75, 0xe7, 0x4e,
	0xfe, 0x0d, 0x37, 0x1c, 0x25, 0x26, 0xa1, 0x4f, 0xb4, 0xea, 0xbb, 0xb0, 0x96, 0x5a, 0xe2, 0x41,
	0xfb, 0x3d, 0x19, 0x2b, 0x8c, 0xfc, 0x13, 0xdd, 0x80, 0xa5, 0x0b, 0xd7, 0x1f, 0x49, 0x5c, 0x15,
	0x5b, 0x12, 0x4f, 0x8a, 0x8f, 0x0d, 0xfc, 0xc6, 0x80, 0x5a, 0x3b, 0xf0, 0x98, 0xdc, 0xc8, 0x8a,
	0xe8, 0xc0, 0xf3, 0x27, 0xe9, 0xfa, 0x6f, 0xcf, 0x7c, 0x0f, 0x36, 0x24, 0xd5, 0xb6, 0x9a, 0xfd,
	0x7e, 0x44, 0x62, 0x7e, 0x78, 0x2e, 0x34, 0xcb, 0x46, 0x1f, 0xc1, 0xba, 0x64, 0x3d, 0xa3, 0x31,
	0x13, 0x95, 0xa4, 0x2c, 0x04, 0x67, 0xb8, 0x78, 0x17, 0xb6, 0x72, 0xd0, 0xc6, 0x21, 0x0d, 0x62,
	0xc2, 0xe1, 0x9c, 0xbb, 0xb1, 0xe2, 0x0a, 0xb8, 0x15, 0x5b, 0xe3, 0x70, 0xe5, 0xa7, 0x84, 0xf5,
	0xce, 0xff, 0xc9, 0x59, 0x71, 0x13, 0xde, 0xcf, 0x2a, 0xef, 0x8d, 0xf9, 0x39, 0x33, 0x26, 0x84,
	0x3b, 0x8c, 0x59, 0x77, 0xe0, 0xe7, 0x50, 0xcf, 0xdb, 0x5f, 0xa1, 0x9f, 0x84, 0xac, 0xb1, 0x48,
	0x9e, 0x5b, 0xb0, 0xe9, 0x10, 0xe5, 0x87, 0x43, 0x11, 0x49, 0x8b, 0x5e, 0xda, 0x34, 0x10, 0x8b,
	0x7a, 0x20, 0xe2, 0xaf, 0x35, 0x8b, 0x0e, 0x89, 0x2e, 0x48, 0xf4, 0x16, 0x61, 0x10, 0x0b, 0x05,
	0x3d, 0x0c, 0xa6, 0x1c, 0xfc, 0x0d, 0x6c, 0xd9, 0x64, 0x48, 0x2f, 0xc8, 0x7f, 0x61, 0xfc, 0x14,
	0x6a, 0x1a, 0x6c, 0x99, 0x06, 0x8b, 0xda, 0x56, 0x89, 0x52, 0xcc, 0x49, 0x94, 0x92, 0x96, 0x28,
	0xf8, 0xd7, 0x22, 0x54, 0xb5, 0x2a, 0x86, 0x6e, 0xc1, 0xaa, 0x7b, 0xe1, 0x7a, 0xbe, 0x7b, 0x3a,
	0x89, 0xb3, 0x29, 0x83, 0x5f, 0xa4, 0x4f, 0x2e, 0x88, 0x2f, 0xec, 0xae, 0xe7, 0x94, 0xc2, 0x23,
	0xbe, 0x6a, 0x4b, 0x21, 0x7e, 0x1d, 0x11, 0x71, 0x63, 0x1a, 0xa8, 0xd4, 0x50, 0x14, 0xef, 0xa8,
	0x7d, 0x97, 0xc9, 0x3c, 0x28, 0xd9, 0xe2, 0x9b, 0xcb, 0x92, 0xd7, 0xa1, 0x17, 0x91, 0xda, 0x92,
	0xe0, 0x2a, 0x0a, 0x7d, 0x0e, 0xd7, 0x42, 0x61, 0x99, 0xf4, 0x9f, 0x46, 0x74, 0x58, 0x5b, 0x16,
	0x11, 0xf4, 0x6e, 0x26, 0x82, 0x78, 0xfb, 0xb6, 0x53, 0xa2, 0xe8, 0x11, 0x40, 0x42, 0x77, 0x69,
	0x6d, 0xe5, 0x32, 0x45, 0x4d, 0x10, 0xff, 0x6e, 0xc0, 0xe6, 0x61, 0xe2, 0x76, 0x79, 0xaa, 0x45,
	0x9d, 0xfe, 0x18, 0xaa, 0x03, 0xcf, 0x67, 0x24, 0x3a, 0x5a, 0xc0, 0x49, 0xba, 0x28, 0x2f, 0x12,
	0x5e, 0xd0, 0xf3, 0x47, 0x7d, 0xd2, 0x12, 0xe7, 0xee, 0xab, 0x5b, 0x9a, 0xe1, 0xe2, 0x43, 0xb8,
	0x99, 0xc1, 0x96, 0x4d, 0xb2, 0xd2, 0xd5, 0x6d, 0xea, 0x5b, 0x2d, 0x25, 0xd2, 0x87, 0xbc, 0x01,
	0x4b, 0x03, 0x1a, 0xf5, 0x92, 0xdb, 0x97, 0xc4, 0x5b, 0x36, 0xc1, 0x9f, 0x0d, 0xb8, 0xe9, 0xcc,
	0xc1, 0x79, 0x0b, 0x56, 0x03, 0x1a, 0xa6, 0x2a, 0xd9, 0x94, 0xc1, 0xc7, 0x25, 0x3a, 0x18, 0xf8,
	0x5e, 0x90, 0x14, 0xf4, 0x84, 0xe4, 0x7a, 0xfd, 0x51, 0xe8, 0x7b, 0x3d, 0x1e, 0x3a, 0xd2, 0x3b,
	0x53, 0x06, 0xaa, 0x43, 0xa5, 0x47, 0xa9, 0xdf, 0xa7, 0x3f, 0x06, 0x22, 0xae, 0x2a, 0xf6, 0x84,
	0xc6, 0x7f, 0x1a, 0x50, 0xd5, 0x5a, 0x23, 0xba, 0x0f, 0xe5, 0x01, 0x8f, 0x25, 0xe3, 0xb2, 0x90,
	0x10, 0x22, 0xe8, 0x2e, 0x14, 0x19, 0x55, 0x67, 0x9e, 0x23, 0x58, 0x64, 0x54, 0x1f, 0xf2, 0x4a,
	0xa9, 0x21, 0x6f, 0x5e, 0xac, 0xcb, 0x2c, 0x17, 0xb1, 0xbe, 0x6a, 0x2b, 0x0a, 0xff, 0x04, 0x6b,
	0x12, 0x66, 0x72, 0x15, 0xff, 0x23, 0x50, 0x6c, 0xc2, 0x7a, 0xb2, 0xb9, 0xbc, 0x28, 0xfc, 0x9b,
	0x01, 0x20, 0xea, 0xef, 0xa4, 0x32, 0x88, 0x72, 0xaa, 0x75, 0x80, 0x29, 0x03, 0x6d, 0x43, 0x55,
	0x10, 0x56, 0x44, 0x06, 0xde, 0x6b, 0x55, 0x77, 0x74, 0x96, 0x90, 0xf0, 0xe9, 0xa9, 0xeb, 0x5b,
	0x24, 0x1a, 0x26, 0xa3, 0x82, 0xce, 0xe2, 0x12, 0xd2, 0x13, 0x52, 0xa2, 0x2c, 0x25, 0x34, 0x16,
	0x7e, 0x08, 0x48, 0xb4, 0x99, 0x4c, 0x5b, 0xd0, 0xea, 0xa8, 0x91, 0xa9, 0xa3, 0x07, 0xf0, 0x4e,
	0x4a, 0x4b, 0x05, 0xe2, 0x27, 0x93, 0x6e, 0x21, 0x33, 0x46, 0x77, 0xdb, 0xf4, 0xdc, 0x49, 0x13,
	0x79, 0xb0, 0x9b, 0x14, 0x4a, 0x99, 0xb1, 0x15, 0x28, 0x7f, 0xd5, 0xb4, 0x3b, 0x66, 0x81, 0x7f,
	0xbd, 0x68, 0xef, 0xbf, 0x30, 0x0d, 0x54, 0x85, 0x95, 0x6e, 0xeb, 0xa5, 0xb5, 0xd7, 0xec, 0x98,
	0x45, 0x4e, 0x58, 0x2d, 0xfb, 0x25, 0x27, 0x4a, 0x3b, 0x6f, 0x2a, 0xb0, 0xe2, 0x48, 0xeb, 0xe8,
	0x09, 0x54, 0x92, 0xc7, 0x03, 0xaa, 0x6b, 0x7b, 0xce, 0xbc, 0x28, 0xea, 0xa6, 0xb6, 0x26, 0x1f,
	0x2b, 0x05, 0xae, 0x9b, 0xbc, 0x19, 0x52, 0xba, 0x33, 0x0f, 0x89, 0x5c, 0xdd, 0xef, 0xe0, 0x7a,
	0x66, 0xc0, 0x40, 0x1f, 0x6a, 0x82, 0xf3, 0x86, 0xa5, 0xfa, 0x9d, 0xcb, 0x85, 0x54, 0xbc, 0x14,
	0x50, 0x4f, 0x5d, 0x4f, 0x7a, 0x0b, 0x5d, 0x7b, 0xee, 0x90, 0x52, 0xbf, 0x7b, 0x85, 0xd4, 0x64,
	0x13, 0x0a, 0xb5, 0x79, 0xd3, 0x0a, 0x7a, 0x70, 0xa9, 0x91, 0xd4, 0x48, 0xb3, 0xf8, 0x86, 0x4f,
	0x61, 0x63, 0x66, 0x1e, 0x41, 0xfa, 0xb0, 0x9e, 0x3f, 0xab, 0x64, 0x6f, 0x20, 0x65, 0x47, 0x0e,
	0x0a, 0xf9, 0x76, 0x52, 0x43, 0x44, 0x8e, 0x9d, 0x23, 0x40, 0xd9, 0x99, 0x23, 0xe5, 0xe5, 0xb9,
	0x23, 0x49, 0x8e, 0xb5, 0xe7, 0x70, 0x3d, 0x33, 0x64, 0xa4, 0xa2, 0x62, 0xde, 0x08, 0x92, 0x63,
	0xeb, 0x15, 0x6c, 0xcc, 0x74, 0xa7, 0xd4, 0x09, 0xf3, 0xbb, 0x6a, 0x1d, 0x5f, 0x26, 0x32, 0xb9,
	0x85, 0x57, 0x9a, 0xf7, 0x72, 0x6c, 0x3b, 0x57, 0xdb, 0x76, 0xe6, 0xda, 0xfe, 0x02, 0x96, 0x65,
	0xed, 0x43, 0xb5, 0xcc, 0x6b, 0x2a, 0xb1, 0xb4, 0x95, 0xb3, 0x32, 0x31, 0xd0, 0x81, 0xaa, 0x56,
	0x61, 0xd0, 0x7b, 0xb3, 0xa1, 0x95, 0x0e, 0x8d, 0xdb, 0xf3, 0x96, 0x13, 0x7b, 0x7b, 0x0f, 0x60,
	0x2b, 0x20, 0xac, 0x11, 0x8f, 0x83, 0xde, 0x39, 0x3b, 0xf7, 0xdc, 0x86, 0x1b, 0x7a, 0x89, 0xd2,
	0xde, 0x9a, 0x2a, 0x24, 0x56, 0x44, 0x19, 0x8d, 0x4f, 0x97, 0xc5, 0xcf, 0x8d, 0xcf, 0xfe, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0xa6, 0x48, 0xc5, 0x4c, 0xed, 0x10, 0x00, 0x00,
}
