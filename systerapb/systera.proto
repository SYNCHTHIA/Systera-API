syntax = "proto3";
package systerapb;

option java_package = "net.synchthia.api.systera";
option java_outer_classname = "SysteraProtos";

message Empty {} 
message PlayerData { string UUID = 1; string name = 2; }

/*
 * Systera API
 */
service Systera {
    rpc Announce(AnnounceRequest) returns (Empty) {}
    rpc Dispatch(DispatchRequest) returns (Empty) {}

    rpc InitPlayerProfile(InitPlayerProfileRequest) returns (InitPlayerProfileResponse) {}
    rpc FetchPlayerProfile(FetchPlayerProfileRequest) returns (FetchPlayerProfileResponse) {}
    rpc FetchPlayerProfileByName(FetchPlayerProfileByNameRequest) returns (FetchPlayerProfileResponse) {}

    rpc SetPlayerGroups(SetPlayerGroupsRequest) returns (Empty);
    rpc SetPlayerServer(SetPlayerServerRequest) returns (Empty);
    rpc RemovePlayerServer(RemovePlayerServerRequest) returns (Empty);
    rpc SetPlayerSettings(SetPlayerSettingsRequest) returns (Empty);

    rpc AltLookup(AltLookupRequest) returns (AltLookupResponse);
    rpc AltLookupByName(AltLookupByNameRequest) returns (AltLookupResponse);

    rpc GetPlayerPunish(GetPlayerPunishRequest) returns (GetPlayerPunishResponse) {}
    rpc SetPlayerPunish(SetPlayerPunishRequest) returns (SetPlayerPunishResponse) {}

    rpc Report(ReportRequest) returns (ReportResponse) {}

    rpc FetchGroups(FetchGroupsRequest) returns (FetchGroupsResponse) {}

    rpc CreateGroup(CreateGroupRequest) returns (Empty) {}
    rpc RemoveGroup(RemoveGroupRequest) returns (Empty) {}
    
    rpc AddPermission (AddPermissionRequest) returns (Empty) {}
    rpc RemovePermission (RemovePermissionRequest) returns (Empty) {}
}

/*
 * Stream API
 */
message AnnounceRequest { string target = 1; string message = 2; }
message DispatchRequest { string target = 1; string cmd = 2 ; }

// ----------------
// STREAMING
// ----------------

// System
message SystemStream {
    enum Type {
        DISPATCH = 0;
        ANNOUNCE = 1;
    }
    Type type = 1;
    string msg = 2;
}

// Player
message PlayerStream {
    enum Type {
      ALL = 0;
      GROUPS = 1;
      SETTINGS = 2;
    }
    Type type = 1;
    PlayerEntry entry = 2; 
}

// Punishment
message PunishmentStream {
    enum Type {
        PUNISH = 0;
        REPORT = 1;
    }
    Type type = 1;
    PunishEntry punishEntry = 2;
    ReportEntry reportEntry = 3;
}

// Group
message GroupStream {
    enum Type {
        GROUP = 0;
        PERMISSIONS = 1;
    }
    Type type = 1;
    GroupEntry groupEntry = 2;
}

/*
 * PLAYER PROFILE
 */

message PlayerStats {
    string currentServer = 1;
    int64 firstLogin = 2;
    int64 lastLogin = 3;
}

message PlayerEntry {
    string playerUUID = 1;
    string playerName = 2;
    repeated string groups = 3;
    map<string, bool> settings = 4;
    PlayerStats stats = 5;
}

message InitPlayerProfileRequest { string playerUUID = 1; string playerName = 2; string playerIPAddress = 3; string playerHostname = 4; }
message InitPlayerProfileResponse { bool hasProfile = 1; }

message FetchPlayerProfileRequest { string playerUUID = 1; }
message FetchPlayerProfileByNameRequest { string playerName = 1; }
message FetchPlayerProfileResponse { PlayerEntry entry = 1; }

message SetPlayerGroupsRequest { string playerUUID = 1; repeated string groups = 2; }

message SetPlayerServerRequest { string playerUUID = 1; string serverName = 2; }
message RemovePlayerServerRequest { string playerUUID = 1; string serverName = 2; }

message SetPlayerSettingsRequest { string playerUUID = 1; string key = 2; bool value = 3; }

message AltLookupRequest { string playerUUID = 1; }
message AltLookupByNameRequest { string playerName = 1; }
message AltLookupResponse { repeated AltLookupEntry entry = 1; }

message AltLookupEntry {
    string address = 1;
    string hostname = 2;
    int64 firstSeen = 3;
    int64 lastSeen = 4;
}

/*
 * PLAYER PUNISHMENTS
 */
enum PunishLevel { WARN = 0; KICK = 1; TEMPBAN = 2; PERMBAN = 3; }

message PunishEntry {
    bool available = 1;

    PunishLevel level = 2;
    string reason = 3;

    int64 date = 4;
    int64 expire = 5;

    PlayerData punishedFrom = 6;
    PlayerData punishedTo = 7;
}

message GetPlayerPunishRequest { string playerUUID = 1; PunishLevel filterLevel = 2; bool includeExpired = 3; }
message GetPlayerPunishResponse { repeated PunishEntry entry = 1; }

message SetPlayerPunishRequest {
    bool force = 1;
    PunishEntry entry = 2;
}
message SetPlayerPunishResponse { bool noprofile = 1; bool offline = 2; bool duplicate = 3; bool cooldown = 4; }

message ReportEntry {
    PlayerData from = 1;
    PlayerData to = 2;
    string message = 3;
    int64 date = 4;
    string server = 5;
}
message ReportRequest { PlayerData from = 1; PlayerData to = 2; string message = 3; }
message ReportResponse {}

/*
 * GROUP PERMISISONS
 */
message GroupEntry {
    string groupName = 1;
    string groupPrefix = 2;
    repeated string globalPerms = 3;
    repeated string serverPerms = 4;
}
message PermissionsEntry {
    string serverName = 1;
    repeated string permissions = 2;
}

message FetchGroupsRequest { string serverName = 1; }
message FetchGroupsResponse { repeated GroupEntry groups = 1; }

message CreateGroupRequest {
    string groupName = 1;
    string groupPrefix = 2;
    repeated PermissionsEntry permsEntry = 3;
 }
//Empty//

message RemoveGroupRequest { string groupName = 1; }
//Empty//

message AddPermissionRequest { string groupName = 1; string target = 2; repeated string permissions = 3; }
//Empty//

message RemovePermissionRequest { string groupName = 1; string target = 2; repeated string permissions = 3; }