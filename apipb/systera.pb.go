// Code generated by protoc-gen-go. DO NOT EDIT.
// source: systera.proto

/*
Package apipb is a generated protocol buffer package.

It is generated from these files:
	systera.proto

It has these top-level messages:
	Empty
	PlayerData
	StreamRequest
	ActionStreamResponse
	PunishStreamResponse
	AnnounceRequest
	QuitStreamRequest
	PlayerEntry
	InitPlayerProfileRequest
	InitPlayerProfileResponse
	FetchPlayerProfileRequest
	FetchPlayerProfileByNameRequest
	FetchPlayerProfileResponse
	SetPlayerServerRequest
	RemovePlayerServerRequest
	SetPlayerSettingsRequest
	PunishEntry
	GetPlayerPunishRequest
	GetPlayerPunishResponse
	SetPlayerPunishRequest
	SetPlayerPunishResponse
	GroupEntry
	FetchGroupsRequest
	FetchGroupsResponse
*/
package apipb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// Stream API
type StreamType int32

const (
	StreamType_QUIT     StreamType = 0
	StreamType_CONNECT  StreamType = 1
	StreamType_RESTORED StreamType = 2
	StreamType_DISPATCH StreamType = 3
)

var StreamType_name = map[int32]string{
	0: "QUIT",
	1: "CONNECT",
	2: "RESTORED",
	3: "DISPATCH",
}
var StreamType_value = map[string]int32{
	"QUIT":     0,
	"CONNECT":  1,
	"RESTORED": 2,
	"DISPATCH": 3,
}

func (x StreamType) String() string {
	return proto.EnumName(StreamType_name, int32(x))
}
func (StreamType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

//
// PLAYER PUNISHMENTS
type PunishLevel int32

const (
	PunishLevel_WARN PunishLevel = 0
	PunishLevel_KICK PunishLevel = 1
	PunishLevel_TBAN PunishLevel = 2
	PunishLevel_PBAN PunishLevel = 3
)

var PunishLevel_name = map[int32]string{
	0: "WARN",
	1: "KICK",
	2: "TBAN",
	3: "PBAN",
}
var PunishLevel_value = map[string]int32{
	"WARN": 0,
	"KICK": 1,
	"TBAN": 2,
	"PBAN": 3,
}

func (x PunishLevel) String() string {
	return proto.EnumName(PunishLevel_name, int32(x))
}
func (PunishLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PlayerData struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *PlayerData) Reset()                    { *m = PlayerData{} }
func (m *PlayerData) String() string            { return proto.CompactTextString(m) }
func (*PlayerData) ProtoMessage()               {}
func (*PlayerData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PlayerData) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PlayerData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StreamRequest struct {
	Name string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type StreamType `protobuf:"varint,2,opt,name=type,enum=apipb.StreamType" json:"type,omitempty"`
}

func (m *StreamRequest) Reset()                    { *m = StreamRequest{} }
func (m *StreamRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()               {}
func (*StreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StreamRequest) GetType() StreamType {
	if m != nil {
		return m.Type
	}
	return StreamType_QUIT
}

type ActionStreamResponse struct {
	Type   StreamType `protobuf:"varint,1,opt,name=type,enum=apipb.StreamType" json:"type,omitempty"`
	Target string     `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Cmd    string     `protobuf:"bytes,3,opt,name=cmd" json:"cmd,omitempty"`
}

func (m *ActionStreamResponse) Reset()                    { *m = ActionStreamResponse{} }
func (m *ActionStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*ActionStreamResponse) ProtoMessage()               {}
func (*ActionStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ActionStreamResponse) GetType() StreamType {
	if m != nil {
		return m.Type
	}
	return StreamType_QUIT
}

func (m *ActionStreamResponse) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *ActionStreamResponse) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

type PunishStreamResponse struct {
	Type   StreamType   `protobuf:"varint,1,opt,name=type,enum=apipb.StreamType" json:"type,omitempty"`
	Target string       `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Entry  *PunishEntry `protobuf:"bytes,3,opt,name=entry" json:"entry,omitempty"`
}

func (m *PunishStreamResponse) Reset()                    { *m = PunishStreamResponse{} }
func (m *PunishStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*PunishStreamResponse) ProtoMessage()               {}
func (*PunishStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PunishStreamResponse) GetType() StreamType {
	if m != nil {
		return m.Type
	}
	return StreamType_QUIT
}

func (m *PunishStreamResponse) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *PunishStreamResponse) GetEntry() *PunishEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type AnnounceRequest struct {
	Target  string `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *AnnounceRequest) Reset()                    { *m = AnnounceRequest{} }
func (m *AnnounceRequest) String() string            { return proto.CompactTextString(m) }
func (*AnnounceRequest) ProtoMessage()               {}
func (*AnnounceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AnnounceRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *AnnounceRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QuitStreamRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *QuitStreamRequest) Reset()                    { *m = QuitStreamRequest{} }
func (m *QuitStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*QuitStreamRequest) ProtoMessage()               {}
func (*QuitStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *QuitStreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

//
// PLAYER PROFILE
type PlayerEntry struct {
	PlayerUUID string          `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
	PlayerName string          `protobuf:"bytes,2,opt,name=playerName" json:"playerName,omitempty"`
	Groups     []string        `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	Settings   map[string]bool `protobuf:"bytes,4,rep,name=settings" json:"settings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *PlayerEntry) Reset()                    { *m = PlayerEntry{} }
func (m *PlayerEntry) String() string            { return proto.CompactTextString(m) }
func (*PlayerEntry) ProtoMessage()               {}
func (*PlayerEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PlayerEntry) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

func (m *PlayerEntry) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *PlayerEntry) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *PlayerEntry) GetSettings() map[string]bool {
	if m != nil {
		return m.Settings
	}
	return nil
}

type InitPlayerProfileRequest struct {
	PlayerUUID      string `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
	PlayerName      string `protobuf:"bytes,2,opt,name=playerName" json:"playerName,omitempty"`
	PlayerIPAddress string `protobuf:"bytes,3,opt,name=playerIPAddress" json:"playerIPAddress,omitempty"`
	PlayerHostname  string `protobuf:"bytes,4,opt,name=playerHostname" json:"playerHostname,omitempty"`
}

func (m *InitPlayerProfileRequest) Reset()                    { *m = InitPlayerProfileRequest{} }
func (m *InitPlayerProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*InitPlayerProfileRequest) ProtoMessage()               {}
func (*InitPlayerProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *InitPlayerProfileRequest) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

func (m *InitPlayerProfileRequest) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *InitPlayerProfileRequest) GetPlayerIPAddress() string {
	if m != nil {
		return m.PlayerIPAddress
	}
	return ""
}

func (m *InitPlayerProfileRequest) GetPlayerHostname() string {
	if m != nil {
		return m.PlayerHostname
	}
	return ""
}

type InitPlayerProfileResponse struct {
	HasProfile bool `protobuf:"varint,1,opt,name=hasProfile" json:"hasProfile,omitempty"`
}

func (m *InitPlayerProfileResponse) Reset()                    { *m = InitPlayerProfileResponse{} }
func (m *InitPlayerProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*InitPlayerProfileResponse) ProtoMessage()               {}
func (*InitPlayerProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *InitPlayerProfileResponse) GetHasProfile() bool {
	if m != nil {
		return m.HasProfile
	}
	return false
}

type FetchPlayerProfileRequest struct {
	PlayerUUID string `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
}

func (m *FetchPlayerProfileRequest) Reset()                    { *m = FetchPlayerProfileRequest{} }
func (m *FetchPlayerProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchPlayerProfileRequest) ProtoMessage()               {}
func (*FetchPlayerProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FetchPlayerProfileRequest) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

type FetchPlayerProfileByNameRequest struct {
	PlayerName string `protobuf:"bytes,1,opt,name=playerName" json:"playerName,omitempty"`
}

func (m *FetchPlayerProfileByNameRequest) Reset()         { *m = FetchPlayerProfileByNameRequest{} }
func (m *FetchPlayerProfileByNameRequest) String() string { return proto.CompactTextString(m) }
func (*FetchPlayerProfileByNameRequest) ProtoMessage()    {}
func (*FetchPlayerProfileByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11}
}

func (m *FetchPlayerProfileByNameRequest) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

type FetchPlayerProfileResponse struct {
	Entry *PlayerEntry `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
}

func (m *FetchPlayerProfileResponse) Reset()                    { *m = FetchPlayerProfileResponse{} }
func (m *FetchPlayerProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchPlayerProfileResponse) ProtoMessage()               {}
func (*FetchPlayerProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FetchPlayerProfileResponse) GetEntry() *PlayerEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type SetPlayerServerRequest struct {
	PlayerUUID string `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
	ServerName string `protobuf:"bytes,2,opt,name=serverName" json:"serverName,omitempty"`
}

func (m *SetPlayerServerRequest) Reset()                    { *m = SetPlayerServerRequest{} }
func (m *SetPlayerServerRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPlayerServerRequest) ProtoMessage()               {}
func (*SetPlayerServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SetPlayerServerRequest) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

func (m *SetPlayerServerRequest) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

type RemovePlayerServerRequest struct {
	PlayerUUID string `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
	ServerName string `protobuf:"bytes,2,opt,name=serverName" json:"serverName,omitempty"`
}

func (m *RemovePlayerServerRequest) Reset()                    { *m = RemovePlayerServerRequest{} }
func (m *RemovePlayerServerRequest) String() string            { return proto.CompactTextString(m) }
func (*RemovePlayerServerRequest) ProtoMessage()               {}
func (*RemovePlayerServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RemovePlayerServerRequest) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

func (m *RemovePlayerServerRequest) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

type SetPlayerSettingsRequest struct {
	PlayerUUID string `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
	Key        string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value      bool   `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (m *SetPlayerSettingsRequest) Reset()                    { *m = SetPlayerSettingsRequest{} }
func (m *SetPlayerSettingsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPlayerSettingsRequest) ProtoMessage()               {}
func (*SetPlayerSettingsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SetPlayerSettingsRequest) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

func (m *SetPlayerSettingsRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetPlayerSettingsRequest) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type PunishEntry struct {
	Available    bool        `protobuf:"varint,1,opt,name=available" json:"available,omitempty"`
	Level        PunishLevel `protobuf:"varint,2,opt,name=level,enum=apipb.PunishLevel" json:"level,omitempty"`
	Reason       string      `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	Date         int64       `protobuf:"varint,4,opt,name=date" json:"date,omitempty"`
	Expire       int64       `protobuf:"varint,5,opt,name=expire" json:"expire,omitempty"`
	PunishedFrom *PlayerData `protobuf:"bytes,6,opt,name=punishedFrom" json:"punishedFrom,omitempty"`
	PunishedTo   *PlayerData `protobuf:"bytes,7,opt,name=punishedTo" json:"punishedTo,omitempty"`
}

func (m *PunishEntry) Reset()                    { *m = PunishEntry{} }
func (m *PunishEntry) String() string            { return proto.CompactTextString(m) }
func (*PunishEntry) ProtoMessage()               {}
func (*PunishEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PunishEntry) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *PunishEntry) GetLevel() PunishLevel {
	if m != nil {
		return m.Level
	}
	return PunishLevel_WARN
}

func (m *PunishEntry) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PunishEntry) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *PunishEntry) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *PunishEntry) GetPunishedFrom() *PlayerData {
	if m != nil {
		return m.PunishedFrom
	}
	return nil
}

func (m *PunishEntry) GetPunishedTo() *PlayerData {
	if m != nil {
		return m.PunishedTo
	}
	return nil
}

type GetPlayerPunishRequest struct {
	PlayerUUID     string      `protobuf:"bytes,1,opt,name=playerUUID" json:"playerUUID,omitempty"`
	FilterLevel    PunishLevel `protobuf:"varint,2,opt,name=filterLevel,enum=apipb.PunishLevel" json:"filterLevel,omitempty"`
	IncludeExpired bool        `protobuf:"varint,3,opt,name=includeExpired" json:"includeExpired,omitempty"`
}

func (m *GetPlayerPunishRequest) Reset()                    { *m = GetPlayerPunishRequest{} }
func (m *GetPlayerPunishRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerPunishRequest) ProtoMessage()               {}
func (*GetPlayerPunishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetPlayerPunishRequest) GetPlayerUUID() string {
	if m != nil {
		return m.PlayerUUID
	}
	return ""
}

func (m *GetPlayerPunishRequest) GetFilterLevel() PunishLevel {
	if m != nil {
		return m.FilterLevel
	}
	return PunishLevel_WARN
}

func (m *GetPlayerPunishRequest) GetIncludeExpired() bool {
	if m != nil {
		return m.IncludeExpired
	}
	return false
}

type GetPlayerPunishResponse struct {
	Entry []*PunishEntry `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
}

func (m *GetPlayerPunishResponse) Reset()                    { *m = GetPlayerPunishResponse{} }
func (m *GetPlayerPunishResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPlayerPunishResponse) ProtoMessage()               {}
func (*GetPlayerPunishResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetPlayerPunishResponse) GetEntry() []*PunishEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type SetPlayerPunishRequest struct {
	Remote bool         `protobuf:"varint,1,opt,name=remote" json:"remote,omitempty"`
	Force  bool         `protobuf:"varint,2,opt,name=force" json:"force,omitempty"`
	Entry  *PunishEntry `protobuf:"bytes,3,opt,name=entry" json:"entry,omitempty"`
}

func (m *SetPlayerPunishRequest) Reset()                    { *m = SetPlayerPunishRequest{} }
func (m *SetPlayerPunishRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPlayerPunishRequest) ProtoMessage()               {}
func (*SetPlayerPunishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *SetPlayerPunishRequest) GetRemote() bool {
	if m != nil {
		return m.Remote
	}
	return false
}

func (m *SetPlayerPunishRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *SetPlayerPunishRequest) GetEntry() *PunishEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type SetPlayerPunishResponse struct {
	Noprofile bool `protobuf:"varint,1,opt,name=noprofile" json:"noprofile,omitempty"`
	Offline   bool `protobuf:"varint,2,opt,name=offline" json:"offline,omitempty"`
	Duplicate bool `protobuf:"varint,3,opt,name=duplicate" json:"duplicate,omitempty"`
	Cooldown  bool `protobuf:"varint,4,opt,name=cooldown" json:"cooldown,omitempty"`
}

func (m *SetPlayerPunishResponse) Reset()                    { *m = SetPlayerPunishResponse{} }
func (m *SetPlayerPunishResponse) String() string            { return proto.CompactTextString(m) }
func (*SetPlayerPunishResponse) ProtoMessage()               {}
func (*SetPlayerPunishResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SetPlayerPunishResponse) GetNoprofile() bool {
	if m != nil {
		return m.Noprofile
	}
	return false
}

func (m *SetPlayerPunishResponse) GetOffline() bool {
	if m != nil {
		return m.Offline
	}
	return false
}

func (m *SetPlayerPunishResponse) GetDuplicate() bool {
	if m != nil {
		return m.Duplicate
	}
	return false
}

func (m *SetPlayerPunishResponse) GetCooldown() bool {
	if m != nil {
		return m.Cooldown
	}
	return false
}

//
// GROUP PERMISISONS
type GroupEntry struct {
	GroupName   string   `protobuf:"bytes,1,opt,name=groupName" json:"groupName,omitempty"`
	GroupPrefix string   `protobuf:"bytes,2,opt,name=groupPrefix" json:"groupPrefix,omitempty"`
	GlobalPerms []string `protobuf:"bytes,3,rep,name=globalPerms" json:"globalPerms,omitempty"`
	ServerPerms []string `protobuf:"bytes,4,rep,name=serverPerms" json:"serverPerms,omitempty"`
}

func (m *GroupEntry) Reset()                    { *m = GroupEntry{} }
func (m *GroupEntry) String() string            { return proto.CompactTextString(m) }
func (*GroupEntry) ProtoMessage()               {}
func (*GroupEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GroupEntry) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *GroupEntry) GetGroupPrefix() string {
	if m != nil {
		return m.GroupPrefix
	}
	return ""
}

func (m *GroupEntry) GetGlobalPerms() []string {
	if m != nil {
		return m.GlobalPerms
	}
	return nil
}

func (m *GroupEntry) GetServerPerms() []string {
	if m != nil {
		return m.ServerPerms
	}
	return nil
}

type FetchGroupsRequest struct {
	ServerName string `protobuf:"bytes,1,opt,name=serverName" json:"serverName,omitempty"`
}

func (m *FetchGroupsRequest) Reset()                    { *m = FetchGroupsRequest{} }
func (m *FetchGroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchGroupsRequest) ProtoMessage()               {}
func (*FetchGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *FetchGroupsRequest) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

type FetchGroupsResponse struct {
	Groups []*GroupEntry `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *FetchGroupsResponse) Reset()                    { *m = FetchGroupsResponse{} }
func (m *FetchGroupsResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchGroupsResponse) ProtoMessage()               {}
func (*FetchGroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *FetchGroupsResponse) GetGroups() []*GroupEntry {
	if m != nil {
		return m.Groups
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "apipb.Empty")
	proto.RegisterType((*PlayerData)(nil), "apipb.PlayerData")
	proto.RegisterType((*StreamRequest)(nil), "apipb.StreamRequest")
	proto.RegisterType((*ActionStreamResponse)(nil), "apipb.ActionStreamResponse")
	proto.RegisterType((*PunishStreamResponse)(nil), "apipb.PunishStreamResponse")
	proto.RegisterType((*AnnounceRequest)(nil), "apipb.AnnounceRequest")
	proto.RegisterType((*QuitStreamRequest)(nil), "apipb.QuitStreamRequest")
	proto.RegisterType((*PlayerEntry)(nil), "apipb.PlayerEntry")
	proto.RegisterType((*InitPlayerProfileRequest)(nil), "apipb.InitPlayerProfileRequest")
	proto.RegisterType((*InitPlayerProfileResponse)(nil), "apipb.InitPlayerProfileResponse")
	proto.RegisterType((*FetchPlayerProfileRequest)(nil), "apipb.FetchPlayerProfileRequest")
	proto.RegisterType((*FetchPlayerProfileByNameRequest)(nil), "apipb.FetchPlayerProfileByNameRequest")
	proto.RegisterType((*FetchPlayerProfileResponse)(nil), "apipb.FetchPlayerProfileResponse")
	proto.RegisterType((*SetPlayerServerRequest)(nil), "apipb.SetPlayerServerRequest")
	proto.RegisterType((*RemovePlayerServerRequest)(nil), "apipb.RemovePlayerServerRequest")
	proto.RegisterType((*SetPlayerSettingsRequest)(nil), "apipb.SetPlayerSettingsRequest")
	proto.RegisterType((*PunishEntry)(nil), "apipb.PunishEntry")
	proto.RegisterType((*GetPlayerPunishRequest)(nil), "apipb.GetPlayerPunishRequest")
	proto.RegisterType((*GetPlayerPunishResponse)(nil), "apipb.GetPlayerPunishResponse")
	proto.RegisterType((*SetPlayerPunishRequest)(nil), "apipb.SetPlayerPunishRequest")
	proto.RegisterType((*SetPlayerPunishResponse)(nil), "apipb.SetPlayerPunishResponse")
	proto.RegisterType((*GroupEntry)(nil), "apipb.GroupEntry")
	proto.RegisterType((*FetchGroupsRequest)(nil), "apipb.FetchGroupsRequest")
	proto.RegisterType((*FetchGroupsResponse)(nil), "apipb.FetchGroupsResponse")
	proto.RegisterEnum("apipb.StreamType", StreamType_name, StreamType_value)
	proto.RegisterEnum("apipb.PunishLevel", PunishLevel_name, PunishLevel_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Systera service

type SysteraClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ActionStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Systera_ActionStreamClient, error)
	PunishStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Systera_PunishStreamClient, error)
	Announce(ctx context.Context, in *AnnounceRequest, opts ...grpc.CallOption) (*Empty, error)
	QuitStream(ctx context.Context, in *QuitStreamRequest, opts ...grpc.CallOption) (*Empty, error)
	InitPlayerProfile(ctx context.Context, in *InitPlayerProfileRequest, opts ...grpc.CallOption) (*InitPlayerProfileResponse, error)
	FetchPlayerProfile(ctx context.Context, in *FetchPlayerProfileRequest, opts ...grpc.CallOption) (*FetchPlayerProfileResponse, error)
	FetchPlayerProfileByName(ctx context.Context, in *FetchPlayerProfileByNameRequest, opts ...grpc.CallOption) (*FetchPlayerProfileResponse, error)
	SetPlayerServer(ctx context.Context, in *SetPlayerServerRequest, opts ...grpc.CallOption) (*Empty, error)
	RemovePlayerServer(ctx context.Context, in *RemovePlayerServerRequest, opts ...grpc.CallOption) (*Empty, error)
	SetPlayerSettings(ctx context.Context, in *SetPlayerSettingsRequest, opts ...grpc.CallOption) (*Empty, error)
	GetPlayerPunish(ctx context.Context, in *GetPlayerPunishRequest, opts ...grpc.CallOption) (*GetPlayerPunishResponse, error)
	SetPlayerPunish(ctx context.Context, in *SetPlayerPunishRequest, opts ...grpc.CallOption) (*SetPlayerPunishResponse, error)
	FetchGroups(ctx context.Context, in *FetchGroupsRequest, opts ...grpc.CallOption) (*FetchGroupsResponse, error)
}

type systeraClient struct {
	cc *grpc.ClientConn
}

func NewSysteraClient(cc *grpc.ClientConn) SysteraClient {
	return &systeraClient{cc}
}

func (c *systeraClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/apipb.Systera/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) ActionStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Systera_ActionStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Systera_serviceDesc.Streams[0], c.cc, "/apipb.Systera/ActionStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &systeraActionStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Systera_ActionStreamClient interface {
	Recv() (*ActionStreamResponse, error)
	grpc.ClientStream
}

type systeraActionStreamClient struct {
	grpc.ClientStream
}

func (x *systeraActionStreamClient) Recv() (*ActionStreamResponse, error) {
	m := new(ActionStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *systeraClient) PunishStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Systera_PunishStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Systera_serviceDesc.Streams[1], c.cc, "/apipb.Systera/PunishStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &systeraPunishStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Systera_PunishStreamClient interface {
	Recv() (*PunishStreamResponse, error)
	grpc.ClientStream
}

type systeraPunishStreamClient struct {
	grpc.ClientStream
}

func (x *systeraPunishStreamClient) Recv() (*PunishStreamResponse, error) {
	m := new(PunishStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *systeraClient) Announce(ctx context.Context, in *AnnounceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/apipb.Systera/Announce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) QuitStream(ctx context.Context, in *QuitStreamRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/apipb.Systera/QuitStream", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) InitPlayerProfile(ctx context.Context, in *InitPlayerProfileRequest, opts ...grpc.CallOption) (*InitPlayerProfileResponse, error) {
	out := new(InitPlayerProfileResponse)
	err := grpc.Invoke(ctx, "/apipb.Systera/InitPlayerProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) FetchPlayerProfile(ctx context.Context, in *FetchPlayerProfileRequest, opts ...grpc.CallOption) (*FetchPlayerProfileResponse, error) {
	out := new(FetchPlayerProfileResponse)
	err := grpc.Invoke(ctx, "/apipb.Systera/FetchPlayerProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) FetchPlayerProfileByName(ctx context.Context, in *FetchPlayerProfileByNameRequest, opts ...grpc.CallOption) (*FetchPlayerProfileResponse, error) {
	out := new(FetchPlayerProfileResponse)
	err := grpc.Invoke(ctx, "/apipb.Systera/FetchPlayerProfileByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) SetPlayerServer(ctx context.Context, in *SetPlayerServerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/apipb.Systera/SetPlayerServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) RemovePlayerServer(ctx context.Context, in *RemovePlayerServerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/apipb.Systera/RemovePlayerServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) SetPlayerSettings(ctx context.Context, in *SetPlayerSettingsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/apipb.Systera/SetPlayerSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) GetPlayerPunish(ctx context.Context, in *GetPlayerPunishRequest, opts ...grpc.CallOption) (*GetPlayerPunishResponse, error) {
	out := new(GetPlayerPunishResponse)
	err := grpc.Invoke(ctx, "/apipb.Systera/GetPlayerPunish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) SetPlayerPunish(ctx context.Context, in *SetPlayerPunishRequest, opts ...grpc.CallOption) (*SetPlayerPunishResponse, error) {
	out := new(SetPlayerPunishResponse)
	err := grpc.Invoke(ctx, "/apipb.Systera/SetPlayerPunish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systeraClient) FetchGroups(ctx context.Context, in *FetchGroupsRequest, opts ...grpc.CallOption) (*FetchGroupsResponse, error) {
	out := new(FetchGroupsResponse)
	err := grpc.Invoke(ctx, "/apipb.Systera/FetchGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Systera service

type SysteraServer interface {
	Ping(context.Context, *Empty) (*Empty, error)
	ActionStream(*StreamRequest, Systera_ActionStreamServer) error
	PunishStream(*StreamRequest, Systera_PunishStreamServer) error
	Announce(context.Context, *AnnounceRequest) (*Empty, error)
	QuitStream(context.Context, *QuitStreamRequest) (*Empty, error)
	InitPlayerProfile(context.Context, *InitPlayerProfileRequest) (*InitPlayerProfileResponse, error)
	FetchPlayerProfile(context.Context, *FetchPlayerProfileRequest) (*FetchPlayerProfileResponse, error)
	FetchPlayerProfileByName(context.Context, *FetchPlayerProfileByNameRequest) (*FetchPlayerProfileResponse, error)
	SetPlayerServer(context.Context, *SetPlayerServerRequest) (*Empty, error)
	RemovePlayerServer(context.Context, *RemovePlayerServerRequest) (*Empty, error)
	SetPlayerSettings(context.Context, *SetPlayerSettingsRequest) (*Empty, error)
	GetPlayerPunish(context.Context, *GetPlayerPunishRequest) (*GetPlayerPunishResponse, error)
	SetPlayerPunish(context.Context, *SetPlayerPunishRequest) (*SetPlayerPunishResponse, error)
	FetchGroups(context.Context, *FetchGroupsRequest) (*FetchGroupsResponse, error)
}

func RegisterSysteraServer(s *grpc.Server, srv SysteraServer) {
	s.RegisterService(&_Systera_serviceDesc, srv)
}

func _Systera_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Systera/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_ActionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SysteraServer).ActionStream(m, &systeraActionStreamServer{stream})
}

type Systera_ActionStreamServer interface {
	Send(*ActionStreamResponse) error
	grpc.ServerStream
}

type systeraActionStreamServer struct {
	grpc.ServerStream
}

func (x *systeraActionStreamServer) Send(m *ActionStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Systera_PunishStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SysteraServer).PunishStream(m, &systeraPunishStreamServer{stream})
}

type Systera_PunishStreamServer interface {
	Send(*PunishStreamResponse) error
	grpc.ServerStream
}

type systeraPunishStreamServer struct {
	grpc.ServerStream
}

func (x *systeraPunishStreamServer) Send(m *PunishStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Systera_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnounceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).Announce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Systera/Announce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).Announce(ctx, req.(*AnnounceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_QuitStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).QuitStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Systera/QuitStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).QuitStream(ctx, req.(*QuitStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_InitPlayerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitPlayerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).InitPlayerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Systera/InitPlayerProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).InitPlayerProfile(ctx, req.(*InitPlayerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_FetchPlayerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPlayerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).FetchPlayerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Systera/FetchPlayerProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).FetchPlayerProfile(ctx, req.(*FetchPlayerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_FetchPlayerProfileByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPlayerProfileByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).FetchPlayerProfileByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Systera/FetchPlayerProfileByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).FetchPlayerProfileByName(ctx, req.(*FetchPlayerProfileByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_SetPlayerServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).SetPlayerServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Systera/SetPlayerServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).SetPlayerServer(ctx, req.(*SetPlayerServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_RemovePlayerServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlayerServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).RemovePlayerServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Systera/RemovePlayerServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).RemovePlayerServer(ctx, req.(*RemovePlayerServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_SetPlayerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).SetPlayerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Systera/SetPlayerSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).SetPlayerSettings(ctx, req.(*SetPlayerSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_GetPlayerPunish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerPunishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).GetPlayerPunish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Systera/GetPlayerPunish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).GetPlayerPunish(ctx, req.(*GetPlayerPunishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_SetPlayerPunish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerPunishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).SetPlayerPunish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Systera/SetPlayerPunish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).SetPlayerPunish(ctx, req.(*SetPlayerPunishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systera_FetchGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysteraServer).FetchGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Systera/FetchGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysteraServer).FetchGroups(ctx, req.(*FetchGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Systera_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.Systera",
	HandlerType: (*SysteraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Systera_Ping_Handler,
		},
		{
			MethodName: "Announce",
			Handler:    _Systera_Announce_Handler,
		},
		{
			MethodName: "QuitStream",
			Handler:    _Systera_QuitStream_Handler,
		},
		{
			MethodName: "InitPlayerProfile",
			Handler:    _Systera_InitPlayerProfile_Handler,
		},
		{
			MethodName: "FetchPlayerProfile",
			Handler:    _Systera_FetchPlayerProfile_Handler,
		},
		{
			MethodName: "FetchPlayerProfileByName",
			Handler:    _Systera_FetchPlayerProfileByName_Handler,
		},
		{
			MethodName: "SetPlayerServer",
			Handler:    _Systera_SetPlayerServer_Handler,
		},
		{
			MethodName: "RemovePlayerServer",
			Handler:    _Systera_RemovePlayerServer_Handler,
		},
		{
			MethodName: "SetPlayerSettings",
			Handler:    _Systera_SetPlayerSettings_Handler,
		},
		{
			MethodName: "GetPlayerPunish",
			Handler:    _Systera_GetPlayerPunish_Handler,
		},
		{
			MethodName: "SetPlayerPunish",
			Handler:    _Systera_SetPlayerPunish_Handler,
		},
		{
			MethodName: "FetchGroups",
			Handler:    _Systera_FetchGroups_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ActionStream",
			Handler:       _Systera_ActionStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PunishStream",
			Handler:       _Systera_PunishStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "systera.proto",
}

func init() { proto.RegisterFile("systera.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x5f, 0x73, 0xdb, 0x44,
	0x10, 0x8f, 0x6c, 0xa7, 0x71, 0xd6, 0x49, 0xe3, 0x1c, 0x99, 0x54, 0x31, 0x25, 0x35, 0x1a, 0x28,
	0x21, 0x0f, 0x1e, 0x08, 0x29, 0xc3, 0x50, 0x06, 0x70, 0x1c, 0xa7, 0x35, 0xed, 0xb8, 0xae, 0xec,
	0x0c, 0x9d, 0xe9, 0x93, 0x62, 0x9f, 0x1d, 0x0d, 0xb2, 0x4e, 0x48, 0xe7, 0x50, 0x3f, 0xf1, 0xd0,
	0x47, 0x5e, 0x78, 0xe2, 0x53, 0xf0, 0xa1, 0xf8, 0x28, 0xcc, 0xfd, 0x93, 0x4e, 0x96, 0x95, 0xa4,
	0xfc, 0x79, 0xbb, 0xfd, 0xdd, 0xee, 0xde, 0xde, 0xee, 0xde, 0xee, 0x1e, 0x6c, 0x46, 0xf3, 0x88,
	0xe2, 0xd0, 0x69, 0x04, 0x21, 0xa1, 0x04, 0xad, 0x3a, 0x81, 0x1b, 0x5c, 0x58, 0x6b, 0xb0, 0xda,
	0x9e, 0x06, 0x74, 0x6e, 0x1d, 0x03, 0xf4, 0x3c, 0x67, 0x8e, 0xc3, 0x53, 0x87, 0x3a, 0x08, 0x41,
	0xe9, 0xfc, 0xbc, 0x73, 0x6a, 0x1a, 0x75, 0xe3, 0x60, 0xdd, 0xe6, 0x6b, 0x86, 0xf9, 0xce, 0x14,
	0x9b, 0x05, 0x81, 0xb1, 0xb5, 0xf5, 0x03, 0x6c, 0xf6, 0x69, 0x88, 0x9d, 0xa9, 0x8d, 0x7f, 0x9e,
	0xe1, 0x88, 0xc6, 0x4c, 0x46, 0xc2, 0x84, 0x3e, 0x86, 0x12, 0x9d, 0x07, 0x42, 0xf0, 0xee, 0xd1,
	0x76, 0x83, 0x9f, 0xdc, 0x10, 0x72, 0x83, 0x79, 0x80, 0x6d, 0xbe, 0x6d, 0x4d, 0x60, 0xa7, 0x39,
	0xa4, 0x2e, 0xf1, 0x95, 0xc6, 0x28, 0x20, 0x7e, 0x94, 0x88, 0x1b, 0xd7, 0x8a, 0xa3, 0x5d, 0xb8,
	0x43, 0x9d, 0x70, 0x82, 0xa9, 0x34, 0x50, 0x52, 0xa8, 0x0a, 0xc5, 0xe1, 0x74, 0x64, 0x16, 0x39,
	0xc8, 0x96, 0xd6, 0xaf, 0xb0, 0xd3, 0x9b, 0xf9, 0x6e, 0x74, 0xf9, 0xdf, 0x1e, 0x74, 0x00, 0xab,
	0xd8, 0xa7, 0xe1, 0x9c, 0x1f, 0x55, 0x39, 0x42, 0x52, 0x5e, 0x1c, 0xd5, 0x66, 0x3b, 0xb6, 0x60,
	0xb0, 0x5a, 0xb0, 0xd5, 0xf4, 0x7d, 0x32, 0xf3, 0x87, 0x58, 0xf9, 0x2d, 0x51, 0x6a, 0xa4, 0x94,
	0x9a, 0xb0, 0x36, 0xc5, 0x51, 0xe4, 0x4c, 0x94, 0xdf, 0x15, 0x69, 0x7d, 0x02, 0xdb, 0x2f, 0x67,
	0x2e, 0xbd, 0xd1, 0xfd, 0xd6, 0x5f, 0x06, 0x54, 0x44, 0x68, 0xb9, 0x11, 0x68, 0x1f, 0x20, 0xe0,
	0xa4, 0x16, 0x61, 0x0d, 0x49, 0xf6, 0xbb, 0x49, 0xb4, 0x35, 0x84, 0x99, 0x3a, 0x09, 0xc9, 0x2c,
	0x88, 0xcc, 0x62, 0xbd, 0xc8, 0x4c, 0x15, 0x14, 0xfa, 0x06, 0xca, 0x11, 0xa6, 0xd4, 0xf5, 0x27,
	0x91, 0x59, 0xaa, 0x17, 0x0f, 0x2a, 0x47, 0x75, 0xe5, 0x82, 0xe4, 0xf4, 0x46, 0x5f, 0xb2, 0x08,
	0x87, 0xc4, 0x12, 0xb5, 0xc7, 0xb0, 0x99, 0xda, 0x62, 0x71, 0xfb, 0x09, 0xcf, 0xa5, 0x7d, 0x6c,
	0x89, 0x76, 0x60, 0xf5, 0xca, 0xf1, 0x66, 0xc2, 0xa6, 0xb2, 0x2d, 0x88, 0xaf, 0x0b, 0x5f, 0x19,
	0xd6, 0x9f, 0x06, 0x98, 0x1d, 0xdf, 0xa5, 0xe2, 0xa0, 0x5e, 0x48, 0xc6, 0xae, 0x17, 0xbb, 0xf6,
	0xdf, 0xde, 0xf7, 0x00, 0xb6, 0x04, 0xd5, 0xe9, 0x35, 0x47, 0xa3, 0x10, 0x47, 0x91, 0x4c, 0xa6,
	0x45, 0x18, 0x3d, 0x84, 0xbb, 0x02, 0x7a, 0x4a, 0x22, 0xca, 0xe3, 0x50, 0xe2, 0x8c, 0x0b, 0xa8,
	0xf5, 0x18, 0xf6, 0x96, 0x58, 0x2b, 0xb3, 0x70, 0x1f, 0xe0, 0xd2, 0x89, 0x24, 0xca, 0xcd, 0x2d,
	0xdb, 0x1a, 0xc2, 0x84, 0xcf, 0x30, 0x1d, 0x5e, 0xfe, 0x93, 0xbb, 0x5a, 0x4d, 0x78, 0x90, 0x15,
	0x3e, 0x99, 0xb3, 0x7b, 0x66, 0x54, 0x74, 0x93, 0x44, 0xd2, 0x10, 0xeb, 0x0c, 0x6a, 0xcb, 0xce,
	0x97, 0xd6, 0xc7, 0x8f, 0xc0, 0x48, 0x3f, 0x82, 0x24, 0x03, 0xd4, 0x23, 0x78, 0x05, 0xbb, 0x7d,
	0x2c, 0x7d, 0xd0, 0xc7, 0xe1, 0x15, 0x0e, 0xdf, 0x21, 0x60, 0x11, 0x17, 0xd0, 0x03, 0x96, 0x20,
	0xd6, 0x6b, 0xd8, 0xb3, 0xf1, 0x94, 0x5c, 0xe1, 0xff, 0x43, 0xf9, 0x05, 0x98, 0x9a, 0xd9, 0x22,
	0x61, 0x6f, 0xab, 0x5b, 0xa6, 0x74, 0x61, 0x49, 0x4a, 0x17, 0xb5, 0x94, 0xb6, 0xde, 0x16, 0xa0,
	0xa2, 0x95, 0x0d, 0x74, 0x1f, 0xd6, 0x9d, 0x2b, 0xc7, 0xf5, 0x9c, 0x8b, 0x38, 0x23, 0x12, 0x80,
	0xb9, 0xdc, 0xc3, 0x57, 0xd8, 0x93, 0xf5, 0x35, 0x5d, 0x77, 0x9e, 0xb3, 0x1d, 0x5b, 0x30, 0xb0,
	0x97, 0x1b, 0x62, 0x27, 0x22, 0xbe, 0x4c, 0x60, 0x49, 0xb1, 0xaa, 0x31, 0x72, 0xa8, 0xc8, 0xd6,
	0xa2, 0xcd, 0xd7, 0x8c, 0x17, 0xbf, 0x09, 0xdc, 0x10, 0x9b, 0xab, 0x1c, 0x95, 0x14, 0x7a, 0x04,
	0x1b, 0x01, 0xd7, 0x8c, 0x47, 0x67, 0x21, 0x99, 0x9a, 0x77, 0x78, 0x9c, 0xb7, 0x53, 0x71, 0x66,
	0x2d, 0xc4, 0x4e, 0xb1, 0xa1, 0xcf, 0x01, 0x14, 0x3d, 0x20, 0xe6, 0x5a, 0x9e, 0x90, 0xc6, 0x64,
	0xfd, 0x61, 0xc0, 0xee, 0x13, 0xe5, 0x6a, 0x71, 0x9b, 0xdb, 0x3a, 0xfa, 0x18, 0x2a, 0x63, 0xd7,
	0xa3, 0x38, 0x7c, 0x7e, 0x83, 0x63, 0x74, 0x36, 0xf6, 0x7c, 0x5d, 0x7f, 0xe8, 0xcd, 0x46, 0xb8,
	0xcd, 0xef, 0x3a, 0x92, 0x51, 0x59, 0x40, 0xad, 0x16, 0xdc, 0xcb, 0xd8, 0x95, 0x4d, 0xff, 0xe2,
	0xf5, 0x3d, 0x20, 0xd0, 0xd2, 0x3f, 0x7d, 0x39, 0x1e, 0xa5, 0x29, 0xa1, 0x2a, 0xd4, 0x92, 0x62,
	0xb9, 0x32, 0x26, 0xe1, 0x30, 0x2e, 0x7f, 0x9c, 0x78, 0x87, 0xae, 0xf3, 0x9b, 0x01, 0xf7, 0xfa,
	0x39, 0x76, 0xdf, 0x87, 0x75, 0x9f, 0x04, 0xa9, 0x9a, 0x93, 0x00, 0xac, 0x09, 0x91, 0xf1, 0xd8,
	0x73, 0x7d, 0x75, 0xb6, 0x22, 0x99, 0xdc, 0x68, 0x16, 0x78, 0xee, 0x90, 0xa5, 0x8f, 0xf0, 0x56,
	0x02, 0xa0, 0x1a, 0x94, 0x87, 0x84, 0x78, 0x23, 0xf2, 0x8b, 0xcf, 0x73, 0xab, 0x6c, 0xc7, 0xb4,
	0xf5, 0xbb, 0x01, 0xf0, 0x84, 0x35, 0x8e, 0x38, 0xc5, 0x79, 0x1b, 0xd1, 0x8a, 0x4e, 0x02, 0xa0,
	0x3a, 0x54, 0x38, 0xd1, 0x0b, 0xf1, 0xd8, 0x7d, 0x23, 0x1f, 0x90, 0x0e, 0x71, 0x0e, 0x8f, 0x5c,
	0x38, 0x5e, 0x0f, 0x87, 0x53, 0xd5, 0x99, 0x74, 0x88, 0x71, 0x88, 0x67, 0x2c, 0x38, 0x4a, 0x82,
	0x43, 0x83, 0xac, 0x63, 0x40, 0xbc, 0xb2, 0x71, 0xb3, 0xf4, 0x47, 0xad, 0x15, 0x04, 0x23, 0x53,
	0x10, 0xbe, 0x87, 0xf7, 0x52, 0x52, 0xd2, 0xa3, 0x9f, 0xc6, 0x5d, 0x52, 0xa4, 0x82, 0x4a, 0xf6,
	0xe4, 0xce, 0xaa, 0x71, 0x1e, 0x7e, 0x07, 0x90, 0x0c, 0x19, 0xa8, 0x0c, 0xa5, 0x97, 0xe7, 0x9d,
	0x41, 0x75, 0x05, 0x55, 0x60, 0xad, 0xf5, 0xa2, 0xdb, 0x6d, 0xb7, 0x06, 0x55, 0x03, 0x6d, 0x40,
	0xd9, 0x6e, 0xf7, 0x07, 0x2f, 0xec, 0xf6, 0x69, 0xb5, 0xc0, 0xa8, 0xd3, 0x4e, 0xbf, 0xd7, 0x1c,
	0xb4, 0x9e, 0x56, 0x8b, 0x87, 0x8f, 0x54, 0xb9, 0x10, 0x79, 0x5c, 0x86, 0xd2, 0x8f, 0x4d, 0xbb,
	0x5b, 0x5d, 0x61, 0xab, 0x67, 0x9d, 0xd6, 0xb3, 0xaa, 0xc1, 0x56, 0x83, 0x93, 0x66, 0xb7, 0x5a,
	0x60, 0xab, 0x1e, 0x5b, 0x15, 0x8f, 0xde, 0x96, 0x61, 0xad, 0x2f, 0x86, 0x42, 0xf4, 0x11, 0x94,
	0x7a, 0xae, 0x3f, 0x41, 0x1b, 0xd2, 0x4c, 0x3e, 0x14, 0xd6, 0x52, 0x94, 0xb5, 0x82, 0xda, 0xb0,
	0xa1, 0x8f, 0x68, 0x68, 0x27, 0x35, 0x23, 0x49, 0x8f, 0xd5, 0xde, 0x97, 0xe8, 0xb2, 0x69, 0xce,
	0x5a, 0xf9, 0xcc, 0x60, 0x6a, 0xf4, 0x01, 0xec, 0x06, 0x35, 0xcb, 0x66, 0x35, 0xae, 0xe6, 0x08,
	0xca, 0x6a, 0x8c, 0x42, 0xbb, 0xea, 0xcc, 0xf4, 0x5c, 0x95, 0xb9, 0xc1, 0x97, 0x00, 0xc9, 0xd4,
	0x84, 0x4c, 0xb9, 0x9b, 0x19, 0xa4, 0x32, 0x72, 0xaf, 0x60, 0x3b, 0xd3, 0xb2, 0xd1, 0x03, 0xc9,
	0x94, 0x37, 0x7a, 0xd4, 0xea, 0xf9, 0x0c, 0xea, 0x1e, 0xe8, 0xb5, 0xcc, 0xba, 0xb4, 0x6a, 0x25,
	0x99, 0xdb, 0xea, 0x6b, 0x1f, 0x5e, 0xc3, 0x11, 0x2b, 0x9f, 0x80, 0x99, 0xd7, 0xef, 0xd1, 0xc3,
	0x5c, 0x05, 0xa9, 0x81, 0xe0, 0x76, 0x07, 0x7d, 0x0b, 0x5b, 0x0b, 0xdd, 0x1c, 0x7d, 0xa0, 0xa2,
	0xba, 0xb4, 0xcb, 0xa7, 0x3d, 0x8c, 0x4e, 0x01, 0x65, 0x7b, 0x76, 0xec, 0x85, 0xdc, 0x76, 0xbe,
	0xa0, 0xe5, 0x04, 0xb6, 0x33, 0xcd, 0x39, 0x8e, 0x52, 0x5e, 0xdb, 0x5e, 0xd0, 0x61, 0xc3, 0xd6,
	0x42, 0x75, 0x8f, 0x6f, 0xb2, 0xbc, 0x1b, 0xd5, 0xf6, 0xf3, 0xb6, 0x63, 0xef, 0xd8, 0x9a, 0x77,
	0x16, 0x74, 0xf6, 0xaf, 0xd7, 0xd9, 0xcf, 0xd5, 0x79, 0x06, 0x15, 0xad, 0xee, 0xa0, 0x3d, 0x3d,
	0x4a, 0xa9, 0x0a, 0x56, 0xab, 0x2d, 0xdb, 0x52, 0x7a, 0x4e, 0x0e, 0x61, 0xcf, 0xc7, 0xb4, 0x11,
	0xcd, 0xfd, 0xe1, 0x25, 0xbd, 0x74, 0x1d, 0xc6, 0xdc, 0x90, 0x7f, 0xc5, 0x93, 0x4d, 0x59, 0x1f,
	0x7a, 0xec, 0xcf, 0x18, 0x5d, 0xdc, 0xe1, 0x7f, 0xc7, 0x2f, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x41, 0x57, 0xf2, 0xe6, 0x4c, 0x0e, 0x00, 0x00,
}
